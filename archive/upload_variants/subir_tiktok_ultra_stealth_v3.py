#!/usr/bin/env python3
"""
üéØ UPLOADER TIKTOK ULTRA STEALTH V3 - AI CONTENT MEJORADO
Versi√≥n mejorada con detecci√≥n robusta del AI Content switch
"""

import asyncio
import json
import os
import random
import time
from playwright.async_api import async_playwright
from dotenv import load_dotenv

async def cargar_cookies(context, cookies_path):
    """Cargar cookies de sesi√≥n"""
    try:
        with open(cookies_path, 'r') as f:
            cookies = json.load(f)
        
        for cookie in cookies:
            if 'sameSite' in cookie:
                val = cookie['sameSite']
                if val not in ["Strict", "Lax", "None"]:
                    cookie["sameSite"] = "None"
        
        await context.add_cookies(cookies)
        print(f"‚úÖ Cookies cargadas desde {cookies_path}")
        return True
    except Exception as e:
        print(f"‚ùå Error cargando cookies: {e}")
        return False

async def movimiento_humano_realista(page):
    """Simula movimientos de mouse completamente humanos"""
    await page.mouse.move(
        random.randint(200, 1200), 
        random.randint(200, 800),
        steps=random.randint(10, 30)
    )
    await asyncio.sleep(random.uniform(0.5, 2.0))
    
    if random.random() < 0.3:
        await page.mouse.wheel(0, random.randint(-100, 100))
        await asyncio.sleep(random.uniform(0.3, 1.0))

async def escribir_como_humano(element, texto):
    """Escribe texto como un humano real"""
    await element.click()
    await asyncio.sleep(random.uniform(0.2, 0.8))
    
    await element.fill("")
    await asyncio.sleep(random.uniform(0.1, 0.3))
    
    for i, char in enumerate(texto):
        await element.type(char)
        
        if char == ' ':
            await asyncio.sleep(random.uniform(0.1, 0.3))
        elif char in '.,!?':
            await asyncio.sleep(random.uniform(0.2, 0.5))
        elif i > 0 and i % random.randint(8, 15) == 0:
            await asyncio.sleep(random.uniform(0.1, 0.4))
        else:
            await asyncio.sleep(random.uniform(0.05, 0.15))

async def activar_ai_content_mejorado(page):
    """Activaci√≥n robusta del AI Content con m√∫ltiples estrategias"""
    print("\nü§ñ ACTIVACI√ìN AI CONTENT MEJORADO V3...")
    
    # Estrategia 1: Buscar por texto espec√≠fico
    estrategias_texto = [
        'text="AI-generated content"',
        'text="AI content"', 
        'text="Generated by AI"',
        'text="This content was generated by AI"',
        'text="AI"'
    ]
    
    for i, selector in enumerate(estrategias_texto):
        try:
            print(f"üîç Estrategia texto #{i+1}: {selector}")
            element = await page.wait_for_selector(selector, timeout=3000)
            if element:
                await element.scroll_into_view_if_needed()
                await asyncio.sleep(random.uniform(0.5, 1.0))
                
                # Buscar el switch asociado
                switch_parent = await element.evaluate_handle('''
                    element => {
                        // Buscar el switch en el contenedor padre
                        let parent = element.closest('div');
                        while (parent && parent !== document.body) {
                            let switches = parent.querySelectorAll('[role="switch"], .Switch_root, input[type="checkbox"]');
                            if (switches.length > 0) {
                                return switches[0];
                            }
                            parent = parent.parentElement;
                        }
                        return null;
                    }
                ''')
                
                if switch_parent:
                    await switch_parent.hover()
                    await asyncio.sleep(random.uniform(0.3, 0.8))
                    await switch_parent.click()
                    print(f"‚úÖ AI Content activado via texto - Estrategia #{i+1}")
                    return True
        except:
            continue
    
    # Estrategia 2: Buscar switches cerca de texto "AI"
    try:
        print("üîç Estrategia 2: Switches cerca de texto AI")
        ai_elements = await page.query_selector_all('*:has-text("AI")')
        for ai_elem in ai_elements:
            try:
                # Buscar switches en un radio de 200px
                nearby_switch = await ai_elem.evaluate_handle('''
                    element => {
                        const rect = element.getBoundingClientRect();
                        const switches = document.querySelectorAll('[role="switch"], .Switch_root, input[type="checkbox"]');
                        
                        for (let sw of switches) {
                            const swRect = sw.getBoundingClientRect();
                            const distance = Math.sqrt(
                                Math.pow(rect.x - swRect.x, 2) + 
                                Math.pow(rect.y - swRect.y, 2)
                            );
                            
                            if (distance < 200) {
                                return sw;
                            }
                        }
                        return null;
                    }
                ''')
                
                if nearby_switch:
                    # Verificar si est√° desactivado
                    is_checked = await nearby_switch.evaluate('''
                        sw => {
                            return sw.checked || 
                                   sw.getAttribute('aria-checked') === 'true' ||
                                   sw.getAttribute('data-state') === 'checked' ||
                                   sw.classList.contains('checked') ||
                                   sw.classList.contains('Switch_root--checked-true');
                        }
                    ''')
                    
                    if not is_checked:
                        await nearby_switch.hover()
                        await asyncio.sleep(random.uniform(0.3, 0.8))
                        await nearby_switch.click()
                        print("‚úÖ AI Content activado via proximidad")
                        return True
            except:
                continue
    except:
        pass
    
    # Estrategia 3: Buscar por clases espec√≠ficas del switch
    switch_selectors = [
        '.Switch_root--checked-false:has-text("AI")',
        '.Switch_root[aria-checked="false"]',
        'input[type="checkbox"]:not(:checked)',
        '[role="switch"][aria-checked="false"]',
        '[data-state="unchecked"]'
    ]
    
    for i, selector in enumerate(switch_selectors):
        try:
            print(f"üîç Estrategia switch #{i+1}: {selector}")
            switches = await page.query_selector_all(selector)
            for switch in switches:
                # Verificar si est√° relacionado con AI
                related_text = await switch.evaluate('''
                    sw => {
                        const parent = sw.closest('div');
                        const text = parent ? parent.innerText.toLowerCase() : '';
                        return text.includes('ai') || text.includes('generated') || text.includes('artificial');
                    }
                ''')
                
                if related_text:
                    await switch.hover()
                    await asyncio.sleep(random.uniform(0.3, 0.8))
                    await switch.click()
                    print(f"‚úÖ AI Content activado via switch - Estrategia #{i+1}")
                    return True
        except:
            continue
    
    # Estrategia 4: Activaci√≥n por JavaScript directo
    try:
        print("üîç Estrategia 4: Activaci√≥n JavaScript directa")
        result = await page.evaluate('''
            () => {
                // Buscar todos los switches
                const switches = document.querySelectorAll('[role="switch"], .Switch_root, input[type="checkbox"]');
                
                for (let sw of switches) {
                    const container = sw.closest('div');
                    const text = container ? container.innerText.toLowerCase() : '';
                    
                    if (text.includes('ai') || text.includes('generated')) {
                        // Verificar si est√° desactivado
                        const isChecked = sw.checked || 
                                        sw.getAttribute('aria-checked') === 'true' ||
                                        sw.getAttribute('data-state') === 'checked' ||
                                        sw.classList.contains('checked');
                                        
                        if (!isChecked) {
                            // Simular click
                            sw.click();
                            
                            // Tambi√©n disparar eventos
                            sw.dispatchEvent(new Event('change', { bubbles: true }));
                            sw.dispatchEvent(new Event('input', { bubbles: true }));
                            
                            return true;
                        }
                    }
                }
                return false;
            }
        ''')
        
        if result:
            print("‚úÖ AI Content activado via JavaScript directo")
            return True
    except:
        pass
    
    # Tomar screenshot de debug
    debug_screenshot = f"ai_content_debug_v3_{random.randint(1000,9999)}.png"
    await page.screenshot(path=debug_screenshot, full_page=True)
    print(f"üì∏ Screenshot debug AI Content V3: {debug_screenshot}")
    
    print("‚ö†Ô∏è AI Content no pudo ser activado con ninguna estrategia")
    return False

async def verificar_ai_content_activado(page):
    """Verificar si el AI Content est√° realmente activado"""
    try:
        is_active = await page.evaluate('''
            () => {
                const switches = document.querySelectorAll('[role="switch"], .Switch_root, input[type="checkbox"]');
                
                for (let sw of switches) {
                    const container = sw.closest('div');
                    const text = container ? container.innerText.toLowerCase() : '';
                    
                    if (text.includes('ai') || text.includes('generated')) {
                        return sw.checked || 
                               sw.getAttribute('aria-checked') === 'true' ||
                               sw.getAttribute('data-state') === 'checked' ||
                               sw.classList.contains('checked') ||
                               sw.classList.contains('Switch_root--checked-true');
                    }
                }
                return false;
            }
        ''')
        
        return is_active
    except:
        return False

async def subir_video_ultra_stealth_v3(video_path, descripcion):
    """Upload ultra sigiloso v3 con AI Content mejorado"""
    print("üéØ UPLOADER TIKTOK ULTRA STEALTH V3")
    print("=" * 60)
    print(f"üìπ Video: {os.path.basename(video_path)}")
    print(f"üìè Tama√±o: {os.path.getsize(video_path) / (1024*1024):.1f} MB")
    
    async with async_playwright() as p:
        browser = await p.chromium.launch(
            headless=False,
            channel="chrome",
            args=[
                '--start-maximized',
                '--disable-blink-features=AutomationControlled',
                '--exclude-switches=enable-automation',
                '--no-first-run',
                '--disable-default-apps',
                '--disable-popup-blocking',
                '--allow-running-insecure-content',
                '--disable-web-security',
                '--disable-features=TranslateUI',
                '--disable-ipc-flooding-protection',
                '--disable-renderer-backgrounding',
                '--disable-backgrounding-occluded-windows',
                '--disable-field-trial-config'
            ],
            ignore_default_args=['--enable-automation']
        )
        
        context = await browser.new_context(
            viewport={'width': 1440, 'height': 900},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
            locale='es-MX',
            timezone_id='America/Mexico_City',
            geolocation={'latitude': 19.4326, 'longitude': -99.1332},
            permissions=['geolocation', 'microphone', 'camera', 'notifications'],
            color_scheme='dark',
            extra_http_headers={
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
                'Accept-Language': 'es-MX,es;q=0.9,en;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'Sec-Fetch-Site': 'none',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-User': '?1',
                'Sec-Fetch-Dest': 'document',
                'Cache-Control': 'max-age=0'
            }
        )
        
        page = await context.new_page()
        
        # Scripts ultra avanzados anti-detecci√≥n (mismo que V2)
        await page.add_init_script("""
            delete Object.getPrototypeOf(navigator).webdriver;
            delete navigator.__webdriver_script_fn;
            delete navigator.__webdriver_evaluate;
            delete navigator.__selenium_unwrapped;
            delete navigator.__webdriver_unwrapped;
            delete navigator.__driver_evaluate;
            delete navigator.__webdriver_script_func;
            delete navigator.__fxdriver_evaluate;
            delete navigator.__driver_unwrapped;
            delete navigator.__fxdriver_unwrapped;
            
            Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined,
                configurable: true
            });
            
            Object.defineProperty(navigator, 'plugins', {
                get: () => ({
                    length: 3,
                    0: { name: 'Chrome PDF Plugin' },
                    1: { name: 'Chrome PDF Viewer' },
                    2: { name: 'Native Client' }
                })
            });
            
            Object.defineProperty(navigator, 'languages', {
                get: () => ['es-MX', 'es', 'en-US', 'en']
            });
            
            window.chrome = {
                runtime: {
                    onConnect: undefined,
                    onMessage: undefined
                },
                loadTimes: function() {
                    return {
                        commitLoadTime: Date.now() / 1000 - Math.random(),
                        finishDocumentLoadTime: Date.now() / 1000 - Math.random(),
                        finishLoadTime: Date.now() / 1000 - Math.random(),
                        firstPaintAfterLoadTime: 0,
                        firstPaintTime: Date.now() / 1000 - Math.random(),
                        navigationType: 'Other',
                        npnNegotiatedProtocol: 'h2',
                        requestTime: Date.now() / 1000 - Math.random(),
                        startLoadTime: Date.now() / 1000 - Math.random(),
                        wasAlternateProtocolAvailable: false,
                        wasFetchedViaSpdy: true,
                        wasNpnNegotiated: true
                    };
                }
            };
            
            console.log('üéØ Ultra stealth V3 activated - AI Content Enhanced');
        """)
        
        try:
            if not await cargar_cookies(context, "config/upload_cookies_playwright.json"):
                return False
            
            # Navegaci√≥n (mismo flujo que V2)
            print("\nüåê Navegando como humano a TikTok...")
            await page.goto("https://www.tiktok.com", timeout=30000)
            await page.wait_for_load_state('domcontentloaded')
            
            await movimiento_humano_realista(page)
            await asyncio.sleep(random.uniform(3, 5))
            
            print("üì± Simulando actividad humana...")
            for _ in range(random.randint(1, 2)):
                await page.mouse.wheel(0, random.randint(300, 600))
                await asyncio.sleep(random.uniform(1, 2))
                await movimiento_humano_realista(page)
            
            print("\nüì§ Navegando a Creator Center...")
            await page.goto("https://www.tiktok.com/creator-center/upload", timeout=30000)
            await page.wait_for_load_state('domcontentloaded')
            await asyncio.sleep(random.uniform(3, 5))
            
            # Cerrar popups
            try:
                close_btns = await page.query_selector_all('button[aria-label*="lose"], button[aria-label*="ose"], [data-e2e="close"]')
                for btn in close_btns:
                    try:
                        await btn.click()
                        await asyncio.sleep(random.uniform(0.5, 1.0))
                    except:
                        pass
            except:
                pass
            
            await movimiento_humano_realista(page)
            print("‚úÖ P√°gina de upload cargada")
            
            # Cargar archivo (mismo que V2)
            print("\nüìÅ Cargando archivo como humano...")
            all_inputs = await page.query_selector_all('input[type="file"]')
            print(f"üìÅ Encontrados {len(all_inputs)} inputs de archivo")
            
            upload_success = False
            for i, input_elem in enumerate(all_inputs):
                try:
                    print(f"\nüéØ Intentando input #{i+1}...")
                    accept_attr = await input_elem.get_attribute('accept')
                    print(f"   Accept: {accept_attr}")
                    
                    await asyncio.sleep(random.uniform(0.5, 1.0))
                    await input_elem.set_input_files(video_path)
                    print(f"‚úÖ ARCHIVO CARGADO con input #{i+1}")
                    upload_success = True
                    break
                    
                except Exception as e:
                    print(f"‚ùå Error con input #{i+1}: {e}")
                    continue
            
            if not upload_success:
                print("‚ùå No se pudo cargar el archivo")
                return False
            
            # Procesamiento (30 segundos como V2)
            print("\n‚è≥ Procesamiento optimizado (30 segundos)...")
            total_wait = 30
            interval = 5
            
            for elapsed in range(0, total_wait, interval):
                print(f"‚è≥ Procesando... {elapsed}/{total_wait}s")
                
                if random.random() < 0.6:
                    await movimiento_humano_realista(page)
                
                await asyncio.sleep(interval)
            
            # Verificaci√≥n de procesamiento
            print("\nüîç Verificaci√≥n final de procesamiento...")
            try:
                indicators = ['video', 'canvas', 'img[src*="thumb"]', '[class*="preview"]', '[class*="thumbnail"]', '[class*="player"]']
                found_indicators = []
                for indicator in indicators:
                    elements = await page.query_selector_all(indicator)
                    if elements:
                        found_indicators.append(f"{indicator} ({len(elements)})")
                
                if found_indicators:
                    print("‚úÖ Indicadores encontrados:")
                    for ind in found_indicators:
                        print(f"   - {ind}")
            except Exception as e:
                print(f"‚ö†Ô∏è Error verificando procesamiento: {e}")
            
            # Screenshot post-procesamiento
            screenshot_path = f"ultra_stealth_v3_processing_{random.randint(1000,9999)}.png"
            await page.screenshot(path=screenshot_path, full_page=True)
            print(f"üì∏ Screenshot post-procesamiento: {screenshot_path}")
            
            # Configuraci√≥n
            await asyncio.sleep(random.uniform(2, 3))
            await movimiento_humano_realista(page)
            
            # Show More
            print("\nüîç Buscando opciones avanzadas...")
            try:
                show_more = await page.wait_for_selector('text="Show more"', timeout=10000)
                if show_more:
                    await show_more.hover()
                    await asyncio.sleep(random.uniform(0.5, 1.0))
                    await show_more.click()
                    print("‚úÖ Show More clickeado")
                    await asyncio.sleep(random.uniform(3, 5))  # M√°s tiempo para cargar opciones
            except:
                print("‚ö†Ô∏è Show More no encontrado")
            
            # AI Content V3 - MEJORADO
            ai_success = await activar_ai_content_mejorado(page)
            
            # Verificar activaci√≥n
            if ai_success:
                await asyncio.sleep(random.uniform(1, 2))
                is_really_active = await verificar_ai_content_activado(page)
                if is_really_active:
                    print("‚úÖ AI Content CONFIRMADO como activado")
                else:
                    print("‚ö†Ô∏è AI Content click realizado pero no confirmado")
            
            # Privacy settings (mismo que V2)
            print("\nüîí Configurando Privacy (Everyone)...")
            try:
                privacy_selectors = [
                    'text="Who can view this video"',
                    'text="Privacy"',
                    'button:has-text("Only me")',
                    'button:has-text("Everyone")'
                ]
                
                for selector in privacy_selectors:
                    try:
                        privacy_elem = await page.wait_for_selector(selector, timeout=3000)
                        if privacy_elem:
                            await privacy_elem.scroll_into_view_if_needed()
                            await privacy_elem.hover()
                            await asyncio.sleep(random.uniform(0.5, 1.0))
                            print(f"üîç Elemento privacy encontrado: {selector}")
                            
                            text_content = await privacy_elem.inner_text()
                            if "Only me" in text_content:
                                await privacy_elem.click()
                                await asyncio.sleep(random.uniform(1, 2))
                                
                                everyone_option = await page.wait_for_selector('text="Everyone"', timeout=5000)
                                if everyone_option:
                                    await everyone_option.click()
                                    print("‚úÖ Privacy cambiado a Everyone")
                                    break
                            break
                    except:
                        continue
            except:
                print("‚ö†Ô∏è No se pudo cambiar privacy settings")
            
            # Descripci√≥n (mismo que V2)
            print("\nüìù Agregando descripci√≥n...")
            desc_selectors = ['[data-e2e="video-caption"]', 'div[contenteditable="true"]', 'textarea[placeholder*="description"]']
            
            for selector in desc_selectors:
                try:
                    desc_input = await page.wait_for_selector(selector, timeout=5000)
                    if desc_input:
                        await desc_input.hover()
                        await asyncio.sleep(random.uniform(0.5, 1.0))
                        await escribir_como_humano(desc_input, descripcion)
                        print(f"‚úÖ Descripci√≥n agregada con escritura humana")
                        await asyncio.sleep(random.uniform(2, 3))
                        break
                except:
                    continue
            
            # Screenshot pre-publicaci√≥n
            screenshot_path = f"ultra_stealth_v3_pre_publish_{random.randint(1000,9999)}.png"
            await page.screenshot(path=screenshot_path, full_page=True)
            print(f"üì∏ Screenshot pre-publicaci√≥n: {screenshot_path}")
            
            # Espera antes de publicar
            print("\n‚è≥ Espera antes de publicar...")
            await asyncio.sleep(random.uniform(5, 10))
            await movimiento_humano_realista(page)
            
            # Publicar
            print("\nüöÄ Publicando video...")
            publish_selectors = ['[data-e2e="post-btn"]', 'text="Post"', 'button[type="submit"]']
            
            for selector in publish_selectors:
                try:
                    post_btn = await page.wait_for_selector(selector, timeout=10000)
                    if post_btn and not await post_btn.is_disabled():
                        await post_btn.hover()
                        await asyncio.sleep(random.uniform(1, 2))
                        await post_btn.click()
                        print(f"‚úÖ Video publicado con comportamiento humano")
                        
                        # Manejar modal post-publicaci√≥n
                        try:
                            await asyncio.sleep(random.uniform(3, 5))
                            modal = await page.wait_for_selector('[role="dialog"]', timeout=10000)
                            if modal:
                                await asyncio.sleep(random.uniform(1, 2))
                                accept_btn = await modal.wait_for_selector('text="Accept"', timeout=5000)
                                if accept_btn:
                                    await accept_btn.hover()
                                    await asyncio.sleep(random.uniform(0.5, 1.0))
                                    await accept_btn.click()
                                    print("‚úÖ Modal post-publicaci√≥n manejado")
                        except:
                            pass
                        
                        # Screenshot final
                        screenshot_path = f"ultra_stealth_v3_success_{random.randint(1000,9999)}.png"
                        await page.screenshot(path=screenshot_path, full_page=True)
                        print(f"üì∏ Screenshot final: {screenshot_path}")
                        
                        print("\nüéâ ¬°VIDEO SUBIDO CON ULTRA STEALTH V3!")
                        await asyncio.sleep(30)
                        return True
                except:
                    continue
            
            print("‚ùå No se pudo publicar")
            return False
                
        except Exception as e:
            print(f"‚ùå Error durante ultra stealth V3 upload: {e}")
            return False
        finally:
            print("\nüîç Manteniendo browser abierto para inspecci√≥n...")
            await asyncio.sleep(30)
            await browser.close()

async def main():
    """Funci√≥n principal"""
    load_dotenv()
    
    video_path = os.path.join("data", "videos", "final", "videos_unidos_FUNDIDO_TIKTOK.mp4")
    
    if not os.path.exists(video_path):
        print(f"‚ùå Video no encontrado: {video_path}")
        return
    
    descripcion = "üé≠ Video ASMR viral generado con IA | Contenido hipn√≥tico y relajante para m√°ximo engagement #ASMR #IA #Viral #Satisfying #TikTok"
    
    success = await subir_video_ultra_stealth_v3(video_path, descripcion)
    
    if success:
        print("\nüéâ ¬°ULTRA STEALTH V3 MISSION ACCOMPLISHED!")
    else:
        print("\n‚ùå Ultra stealth V3 fallido - necesita revisi√≥n manual")

if __name__ == "__main__":
    asyncio.run(main())
