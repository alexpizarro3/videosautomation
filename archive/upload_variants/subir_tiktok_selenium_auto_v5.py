#!/usr/bin/env python3
"""
üéØ UPLOADER TIKTOK ULTRA STEALTH V5 - SELENIUM AUTO-DRIVER
Versi√≥n V5 con descarga autom√°tica de ChromeDriver
"""

import json
import os
import random
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager

def cargar_cookies(driver, cookies_path):
    """Cargar cookies de sesi√≥n - Selenium version"""
    try:
        with open(cookies_path, 'r') as f:
            cookies = json.load(f)
        
        # Ir a TikTok primero para cargar cookies
        driver.get("https://www.tiktok.com")
        time.sleep(3)
        
        cookies_loaded = 0
        for cookie in cookies:
            try:
                # Convertir formato Playwright a Selenium
                selenium_cookie = {
                    'name': cookie['name'],
                    'value': cookie['value'],
                    'domain': cookie.get('domain', '.tiktok.com'),
                    'path': cookie.get('path', '/'),
                }
                
                # Agregar campos opcionales si existen
                if 'secure' in cookie:
                    selenium_cookie['secure'] = cookie['secure']
                if 'httpOnly' in cookie:
                    selenium_cookie['httpOnly'] = cookie['httpOnly']
                
                driver.add_cookie(selenium_cookie)
                cookies_loaded += 1
            except Exception as e:
                print(f"   ‚ö†Ô∏è Error con cookie {cookie.get('name', 'unknown')}: {e}")
                continue
        
        print(f"‚úÖ Cookies cargadas: {cookies_loaded}/{len(cookies)} desde {cookies_path}")
        return True
    except Exception as e:
        print(f"‚ùå Error cargando cookies: {e}")
        return False

def setup_stealth_chrome():
    """Configurar Chrome con m√°xima anti-detecci√≥n"""
    print("üõ°Ô∏è Configurando Chrome con anti-detecci√≥n extrema...")
    
    options = Options()
    
    # Configuraci√≥n anti-detecci√≥n b√°sica
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-blink-features=AutomationControlled')
    options.add_argument('--disable-extensions')
    options.add_argument('--no-first-run')
    options.add_argument('--disable-default-apps')
    options.add_argument('--disable-infobars')
    options.add_argument('--start-maximized')
    options.add_argument('--window-size=1920,1080')
    options.add_argument('--disable-web-security')
    options.add_argument('--disable-features=VizDisplayCompositor')
    options.add_argument('--disable-background-timer-throttling')
    options.add_argument('--disable-backgrounding-occluded-windows')
    options.add_argument('--disable-renderer-backgrounding')
    options.add_argument('--disable-field-trial-config')
    options.add_argument('--disable-back-forward-cache')
    options.add_argument('--disable-features=TranslateUI')
    options.add_argument('--disable-ipc-flooding-protection')
    
    # User agent espec√≠fico para Windows
    options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
    
    # Configuraci√≥n de perfil persistente
    profile_dir = os.path.join(os.getcwd(), "chrome_profile_selenium_auto")
    if not os.path.exists(profile_dir):
        os.makedirs(profile_dir)
        print(f"üìÅ Creado directorio de perfil: {profile_dir}")
    else:
        print(f"üìÅ Usando perfil existente: {profile_dir}")
    
    options.add_argument(f'--user-data-dir={profile_dir}')
    
    # Configuraci√≥n adicional para evitar detecci√≥n
    prefs = {
        "profile.default_content_setting_values": {
            "notifications": 2,
            "geolocation": 1,
            "media_stream": 1,
        },
        "profile.managed_default_content_settings": {
            "images": 1
        },
        "profile.content_settings.exceptions.automatic_downloads.*.setting": 1,
        "profile.default_content_settings.popups": 0,
        "managed_default_content_settings.images": 1
    }
    options.add_experimental_option("prefs", prefs)
    options.add_experimental_option("excludeSwitches", ["enable-automation", "enable-logging"])
    options.add_experimental_option('useAutomationExtension', False)
    
    return options

def subir_video_ultra_stealth_selenium_auto(video_path, descripcion):
    """Funci√≥n principal Selenium con descarga autom√°tica de ChromeDriver"""
    print("üéØ UPLOADER TIKTOK ULTRA STEALTH V5 - SELENIUM AUTO-DRIVER")
    print("=" * 60)
    print("üìã AJUSTES APLICADOS:")
    print("1. Pantalla 1920x1080 (sin cortes)")
    print("2. Procesamiento 20 segundos") 
    print("3. XPath espec√≠fico para AI content")
    print("4. Verificar Everyone seleccionado")
    print("5. Esperar 30 segundos antes de Post")
    print("6. üî• SELENIUM con descarga autom√°tica de ChromeDriver")
    print("=" * 60)
    
    cookies_path = "config/upload_cookies_playwright.json"
    
    # Verificar archivo
    if not os.path.exists(video_path):
        print(f"‚ùå Archivo no encontrado: {video_path}")
        return False
    
    file_size = os.path.getsize(video_path) / (1024*1024)
    print(f"üìπ Video: {video_path}")
    print(f"üìè Tama√±o: {file_size:.1f} MB")
    
    # Configurar Chrome
    options = setup_stealth_chrome()
    
    try:
        # Crear driver con descarga autom√°tica de ChromeDriver
        print("üì• Descargando/verificando ChromeDriver...")
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        
        # Aplicar scripts anti-detecci√≥n
        print("üïµÔ∏è Aplicando scripts de stealth extremo...")
        driver.execute_script("""
            // Eliminar propiedades de webdriver
            Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined,
            });
            
            // Simular plugins reales
            Object.defineProperty(navigator, 'plugins', {
                get: () => [1, 2, 3, 4, 5],
            });
            
            // Configurar idiomas
            Object.defineProperty(navigator, 'languages', {
                get: () => ['es-MX', 'es', 'en-US', 'en'],
            });
            
            // Simular Chrome runtime
            window.chrome = {
                runtime: {},
            };
            
            // Simular permisos
            Object.defineProperty(navigator, 'permissions', {
                get: () => ({
                    query: () => Promise.resolve({ state: 'granted' }),
                }),
            });
        """)
        
        # Configurar ventana
        driver.set_window_size(1920, 1080)
        driver.maximize_window()
        
        print("‚úÖ Chrome configurado con anti-detecci√≥n extrema")
        
        # Cargar cookies
        cookie_loaded = cargar_cookies(driver, cookies_path)
        
        print("\nüåê Navegando directamente a Creator Center...")
        driver.get('https://www.tiktok.com/creator-center/upload')
        time.sleep(5)
        
        # Verificar autenticaci√≥n
        print("   üîç Verificando estado de autenticaci√≥n...")
        needs_login = False
        
        try:
            # Buscar indicadores de login
            login_elements = driver.find_elements(By.XPATH, "//button[contains(text(), 'Log in')] | //button[contains(text(), 'Sign up')]")
            if any(el.is_displayed() for el in login_elements):
                needs_login = True
        except:
            pass
        
        if needs_login:
            print("‚ö†Ô∏è SE REQUIERE LOGIN MANUAL:")
            print("   üë§ 1. Logueate en TikTok en el navegador que se abri√≥")
            print("   üéØ 2. Navega manualmente a: https://www.tiktok.com/creator-center/upload")
            print("   ‚úÖ 3. Aseg√∫rate de ver la p√°gina de upload")
            print("   ‚è≥ 4. Presiona Enter aqu√≠ cuando est√©s listo...")
            input()
            
            driver.get('https://www.tiktok.com/creator-center/upload')
            time.sleep(3)
        else:
            print("‚úÖ Ya autenticado - Continuando autom√°ticamente")
        
        # Verificar p√°gina de upload
        print("\nüîç Esperando carga de p√°gina de upload...")
        
        page_loaded = False
        for attempt in range(3):
            try:
                WebDriverWait(driver, 15).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'input[type="file"]'))
                )
                print("‚úÖ P√°gina de upload cargada")
                page_loaded = True
                break
            except TimeoutException:
                if attempt < 2:
                    print(f"‚ö†Ô∏è Intento {attempt + 1} fall√≥, reintentando...")
                    driver.refresh()
                    time.sleep(5)
        
        if not page_loaded:
            print("‚ùå Error: P√°gina de upload no carg√≥")
            return False
        
        # Upload de archivo
        print("\nüìÅ Cargando archivo...")
        file_inputs = driver.find_elements(By.CSS_SELECTOR, 'input[type="file"]')
        print(f"üìÅ Encontrados {len(file_inputs)} inputs de archivo")
        
        if not file_inputs:
            print("‚ùå No se encontraron inputs de archivo")
            return False
        
        upload_success = False
        for i, file_input in enumerate(file_inputs, 1):
            try:
                print(f"üéØ Intentando input #{i}...")
                
                # Hacer visible el input
                driver.execute_script("""
                    arguments[0].style.display = 'block';
                    arguments[0].style.visibility = 'visible';
                    arguments[0].style.opacity = '1';
                """, file_input)
                
                file_input.send_keys(os.path.abspath(video_path))
                time.sleep(random.uniform(2, 4))
                print(f"‚úÖ ARCHIVO CARGADO con input #{i}")
                upload_success = True
                break
            except Exception as e:
                print(f"‚ùå Input #{i} fall√≥: {str(e)[:100]}")
        
        if not upload_success:
            return False
        
        # Procesamiento (20 segundos)
        print("\n‚è≥ PROCESAMIENTO OPTIMIZADO (20 segundos)...")
        for i in range(4):
            print(f"‚è≥ Procesando... {i*5}/20s")
            time.sleep(5)
        
        # Screenshot
        timestamp = int(time.time())
        driver.save_screenshot(f"selenium_auto_processing_{timestamp}.png")
        print(f"üì∏ Screenshot: selenium_auto_processing_{timestamp}.png")
        
        # Show More con XPath espec√≠fico
        print("\nüîç Buscando opciones avanzadas...")
        show_more_clicked = False
        
        # XPATH ESPEC√çFICO proporcionado por el usuario para Show More
        xpath_show_more = '//*[@id="root"]/div/div/div[2]/div[2]/div/div/div/div[4]/div[1]/div[4]/div[3]/div/span[1]'
        
        try:
            print(f"üîç Usando XPath espec√≠fico para Show More: {xpath_show_more}")
            
            # Scroll para asegurar visibilidad
            print("   üìú Haciendo scroll para asegurar visibilidad...")
            driver.execute_script("window.scrollBy(0, 300)")
            time.sleep(2)
            
            # Buscar elemento Show More por XPath espec√≠fico
            show_more = driver.find_element(By.XPATH, xpath_show_more)
            
            if show_more.is_displayed():
                print("   üìç Elemento Show More encontrado con XPath espec√≠fico")
                
                # Scroll al elemento y click
                driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", show_more)
                time.sleep(2)
                
                print("   üñ±Ô∏è Haciendo click en Show More...")
                driver.execute_script("arguments[0].click();", show_more)
                time.sleep(3)
                
                print("‚úÖ Show More clickeado con XPath espec√≠fico - Secci√≥n expandida")
                show_more_clicked = True
            else:
                print("   ‚ùå Elemento Show More no visible con XPath espec√≠fico")
                
        except NoSuchElementException:
            print("   ‚ùå Elemento Show More no encontrado con XPath espec√≠fico")
        except Exception as e:
            print(f"   ‚ùå Error con XPath espec√≠fico de Show More: {e}")
        
        if not show_more_clicked:
            print("‚ö†Ô∏è Show More no encontrado, haciendo scroll...")
            driver.execute_script("window.scrollBy(0, 500)")
            time.sleep(2)
        
        # Activar AI Content con XPath espec√≠fico
        print("\nüéØ ACTIVACI√ìN AI CONTENT CON XPATH ESPEC√çFICO...")
        xpath_ai_toggle = '//*[@id="root"]/div/div/div[2]/div[2]/div/div/div/div[4]/div[1]/div[4]/div[1]/div[3]/div[3]/div/div/div/div/span'
        
        try:
            print(f"üîç Usando XPath espec√≠fico para AI Content: {xpath_ai_toggle}")
            
            # Scroll adicional
            driver.execute_script("window.scrollBy(0, 300)")
            time.sleep(2)
            
            ai_toggle = driver.find_element(By.XPATH, xpath_ai_toggle)
            
            if ai_toggle.is_displayed():
                print("   üìç Elemento AI toggle encontrado con XPath")
                
                # Scroll al elemento y click
                driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", ai_toggle)
                time.sleep(2)
                
                print("   üñ±Ô∏è Haciendo click en AI Content toggle...")
                driver.execute_script("arguments[0].click();", ai_toggle)
                
                print("‚úÖ AI Content toggle clickeado con XPath espec√≠fico")
                time.sleep(3)
            else:
                print("   ‚ùå Elemento AI toggle no visible")
                
        except NoSuchElementException:
            print("   ‚ùå Elemento AI toggle no encontrado con XPath")
        except Exception as e:
            print(f"   ‚ùå Error con AI Content: {e}")
        
        # Agregar descripci√≥n
        print("\nüìù Agregando descripci√≥n...")
        desc_selectors = [
            "//textarea[contains(@placeholder, 'escrib')] | //textarea[contains(@placeholder, 'Describ')] | //div[@contenteditable='true']"
        ]
        
        descripcion_agregada = False
        for selector in desc_selectors:
            try:
                desc_element = driver.find_element(By.XPATH, selector)
                if desc_element.is_displayed():
                    print(f"   üìç Campo de descripci√≥n encontrado")
                    driver.execute_script("arguments[0].focus();", desc_element)
                    time.sleep(1)
                    desc_element.clear()
                    time.sleep(1)
                    desc_element.send_keys(descripcion)
                    
                    # Verificar
                    time.sleep(2)
                    texto_actual = desc_element.get_attribute('value') or desc_element.text
                    
                    if texto_actual and len(texto_actual.strip()) > 10:
                        print("‚úÖ Descripci√≥n agregada correctamente")
                        print(f"   üìù Caracteres escritos: {len(texto_actual)}")
                        descripcion_agregada = True
                        break
            except NoSuchElementException:
                continue
        
        # Screenshot pre-publicaci√≥n
        timestamp = int(time.time())
        driver.save_screenshot(f"selenium_auto_pre_publish_{timestamp}.png")
        print(f"üì∏ Screenshot pre-publicaci√≥n: selenium_auto_pre_publish_{timestamp}.png")
        
        # Esperar 30 segundos
        print("\n‚è≥ ESPERANDO 30 SEGUNDOS ANTES DE PUBLICAR...")
        for i in range(6):
            print(f"   ‚è∞ {30 - i*5} segundos restantes...")
            time.sleep(5)
        
        # Buscar bot√≥n Post
        print("\nüöÄ BUSCANDO BOT√ìN POST...")
        
        publish_selectors = [
            "//button[contains(text(), 'Post')] | //button[contains(text(), 'Publicar')] | //button[@type='submit']"
        ]
        
        publish_success = False
        for selector in publish_selectors:
            try:
                publish_button = driver.find_element(By.XPATH, selector)
                
                is_visible = publish_button.is_displayed()
                is_enabled = publish_button.is_enabled()
                text_content = publish_button.text
                
                print(f"   üìç Bot√≥n encontrado: '{text_content}' - Visible: {is_visible}, Habilitado: {is_enabled}")
                
                if is_visible and is_enabled:
                    print("   ü§ñ Simulando comportamiento humano...")
                    driver.execute_script("arguments[0].scrollIntoView();", publish_button)
                    time.sleep(random.uniform(2, 4))
                    
                    # Click
                    print("   üñ±Ô∏è Realizando click...")
                    driver.execute_script("arguments[0].click();", publish_button)
                    print("‚úÖ Bot√≥n Post clickeado")
                    
                    # Manejo de modales
                    print("   üîç Verificando si aparece alg√∫n modal...")
                    time.sleep(5)
                    
                    # Buscar modal de √©xito o confirmaci√≥n
                    try:
                        success_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'success') or contains(text(), 'posted') or contains(text(), 'published')]")
                        if success_elements:
                            print("‚úÖ Video publicado exitosamente!")
                            publish_success = True
                            break
                    except:
                        pass
                    
                    # Si no hay modal de √©xito, verificar URL
                    time.sleep(3)
                    current_url = driver.current_url
                    if 'upload' not in current_url or 'success' in current_url:
                        print("‚úÖ URL cambi√≥ - Video posiblemente publicado")
                        publish_success = True
                        break
                    else:
                        print("‚úÖ Click realizado - Asumiendo √©xito")
                        publish_success = True
                        break
                    
            except NoSuchElementException:
                continue
        
        if publish_success:
            print("‚úÖ Video publicado exitosamente")
            time.sleep(10)
            return True
        else:
            print("‚ùå No se pudo encontrar el bot√≥n Post")
            driver.save_screenshot(f"selenium_auto_no_post_button_{int(time.time())}.png")
            return False
        
    except Exception as e:
        print(f"‚ùå Error en proceso principal: {e}")
        return False
    
    finally:
        try:
            time.sleep(3)
            driver.quit()
        except:
            pass

def main():
    """Funci√≥n principal"""
    video_path = "data/videos/final/videos_unidos_FUNDIDO_TIKTOK.mp4"
    descripcion = """üî• ¬°Contenido √âPICO que te va a SORPRENDER! ‚ú® 

No puedes perderte esta incre√≠ble experiencia viral que est√° rompiendo TikTok üöÄ
¬°Dale LIKE si te gust√≥ y COMPARTE con tus amigos! üíñ

Prep√°rate para algo que jam√°s has visto antes... ¬øEst√°s listo? üëÄ

#fyp #viral #trending #amazing #foryou"""
    
    resultado = subir_video_ultra_stealth_selenium_auto(video_path, descripcion)
    
    if resultado:
        print("\nüéâ ¬°UPLOAD COMPLETADO EXITOSAMENTE!")
    else:
        print("\n‚ùå Upload fall√≥")

if __name__ == "__main__":
    main()
