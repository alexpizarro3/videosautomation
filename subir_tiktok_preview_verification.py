#!/usr/bin/env python3
"""
üé¨ UPLOADER TIKTOK CON VERIFICACI√ìN DE PREVIEW MEJORADA
Enfoque espec√≠fico en asegurar que el video se muestre en portada y preview
"""

import asyncio
import json
import os
import random
from playwright.async_api import async_playwright
from dotenv import load_dotenv

async def cargar_cookies(context, cookies_path):
    """Cargar cookies de sesi√≥n"""
    try:
        with open(cookies_path, 'r') as f:
            cookies = json.load(f)
        
        # Limpiar cookies para evitar errores
        for cookie in cookies:
            if 'sameSite' in cookie:
                val = cookie['sameSite']
                if val not in ["Strict", "Lax", "None"]:
                    cookie["sameSite"] = "None"
        
        await context.add_cookies(cookies)
        print(f"‚úÖ Cookies cargadas desde {cookies_path}")
        return True
    except Exception as e:
        print(f"‚ùå Error cargando cookies: {e}")
        return False

async def verificar_preview_video(page, timeout=60):
    """Verificaci√≥n exhaustiva del preview del video"""
    print("\nüîç VERIFICANDO PREVIEW DEL VIDEO...")
    print("=" * 50)
    
    verification_steps = []
    
    # Paso 1: Verificar que el video se est√© procesando
    try:
        print("üìä Paso 1: Verificando estado de procesamiento...")
        
        # Buscar indicadores de procesamiento
        processing_selectors = [
            '[data-e2e="upload-progress"]',
            '.upload-progress',
            'text="Processing"',
            'text="Uploading"',
            '[class*="progress"]'
        ]
        
        processing_found = False
        for selector in processing_selectors:
            try:
                element = await page.wait_for_selector(selector, timeout=5000)
                if element:
                    print(f"‚úÖ Indicador de procesamiento encontrado: {selector}")
                    processing_found = True
                    break
            except:
                continue
        
        if processing_found:
            verification_steps.append("‚úÖ Video en procesamiento")
        else:
            print("‚ö†Ô∏è  No se detectaron indicadores de procesamiento")
            verification_steps.append("‚ö†Ô∏è  Procesamiento no detectado")
            
    except Exception as e:
        print(f"‚ùå Error verificando procesamiento: {e}")
        verification_steps.append("‚ùå Error en verificaci√≥n de procesamiento")
    
    # Paso 2: Esperar a que aparezca el preview
    try:
        print("\nüì∫ Paso 2: Esperando preview del video...")
        
        preview_selectors = [
            'video',
            '[data-e2e="video-preview"]',
            '.video-preview',
            'video[src]',
            'video[controls]'
        ]
        
        preview_found = False
        preview_element = None
        
        for selector in preview_selectors:
            try:
                preview_element = await page.wait_for_selector(selector, timeout=15000)
                if preview_element:
                    print(f"‚úÖ Preview encontrado: {selector}")
                    preview_found = True
                    break
            except:
                continue
        
        if preview_found and preview_element:
            # Verificar que el video tenga contenido
            try:
                src = await preview_element.get_attribute('src')
                if src:
                    print(f"‚úÖ Video tiene src: {src[:50]}...")
                    verification_steps.append("‚úÖ Preview con contenido")
                else:
                    print("‚ö†Ô∏è  Video sin src attribute")
                    verification_steps.append("‚ö†Ô∏è  Preview sin src")
            except:
                verification_steps.append("‚ö†Ô∏è  No se pudo verificar src del video")
        else:
            print("‚ùå No se encontr√≥ preview del video")
            verification_steps.append("‚ùå Preview no encontrado")
            
    except Exception as e:
        print(f"‚ùå Error verificando preview: {e}")
        verification_steps.append("‚ùå Error en verificaci√≥n de preview")
    
    # Paso 3: Verificar thumbnail/portada
    try:
        print("\nüñºÔ∏è  Paso 3: Verificando thumbnail/portada...")
        
        thumbnail_selectors = [
            '[data-e2e="video-cover"]',
            '.video-cover',
            '.thumbnail',
            'img[alt*="cover"]',
            '[class*="cover"]',
            '[class*="thumbnail"]'
        ]
        
        thumbnail_found = False
        for selector in thumbnail_selectors:
            try:
                element = await page.wait_for_selector(selector, timeout=10000)
                if element:
                    print(f"‚úÖ Thumbnail encontrado: {selector}")
                    thumbnail_found = True
                    break
            except:
                continue
        
        if thumbnail_found:
            verification_steps.append("‚úÖ Thumbnail/portada detectada")
        else:
            print("‚ö†Ô∏è  No se detect√≥ thumbnail espec√≠fico")
            verification_steps.append("‚ö†Ô∏è  Thumbnail no detectado")
            
    except Exception as e:
        print(f"‚ùå Error verificando thumbnail: {e}")
        verification_steps.append("‚ùå Error en verificaci√≥n de thumbnail")
    
    # Paso 4: Verificar botones de publicaci√≥n
    try:
        print("\nüì§ Paso 4: Verificando botones de publicaci√≥n...")
        
        publish_selectors = [
            '[data-e2e="post-btn"]',
            'button[type="submit"]',
            'text="Post"',
            'text="Publish"',
            'button[class*="post"]',
            'button[class*="publish"]'
        ]
        
        publish_found = False
        for selector in publish_selectors:
            try:
                element = await page.wait_for_selector(selector, timeout=5000)
                if element:
                    # Verificar si el bot√≥n est√° habilitado
                    is_disabled = await element.is_disabled()
                    if not is_disabled:
                        print(f"‚úÖ Bot√≥n de publicaci√≥n activo: {selector}")
                        publish_found = True
                        break
                    else:
                        print(f"‚ö†Ô∏è  Bot√≥n encontrado pero deshabilitado: {selector}")
            except:
                continue
        
        if publish_found:
            verification_steps.append("‚úÖ Bot√≥n de publicaci√≥n activo")
        else:
            print("‚ùå No se encontr√≥ bot√≥n de publicaci√≥n activo")
            verification_steps.append("‚ùå Bot√≥n de publicaci√≥n no disponible")
            
    except Exception as e:
        print(f"‚ùå Error verificando bot√≥n de publicaci√≥n: {e}")
        verification_steps.append("‚ùå Error en verificaci√≥n de publicaci√≥n")
    
    # Paso 5: Tomar screenshot para evidencia
    try:
        print("\nüì∏ Paso 5: Capturando evidencia...")
        screenshot_path = f"upload_verification_{random.randint(1000,9999)}.png"
        await page.screenshot(path=screenshot_path, full_page=True)
        print(f"‚úÖ Screenshot guardado: {screenshot_path}")
        verification_steps.append(f"‚úÖ Evidencia: {screenshot_path}")
    except Exception as e:
        print(f"‚ùå Error capturando screenshot: {e}")
        verification_steps.append("‚ùå Error capturando evidencia")
    
    # Resumen de verificaci√≥n
    print(f"\nüìä RESUMEN DE VERIFICACI√ìN:")
    print("=" * 50)
    for step in verification_steps:
        print(f"   {step}")
    
    # Determinar √©xito
    success_count = len([s for s in verification_steps if s.startswith("‚úÖ")])
    total_steps = len(verification_steps)
    success_rate = (success_count / total_steps) * 100 if total_steps > 0 else 0
    
    print(f"\nüéØ TASA DE √âXITO: {success_rate:.1f}% ({success_count}/{total_steps})")
    
    if success_rate >= 60:  # Consideramos √©xito si 60% o m√°s de verificaciones pasan
        print("üéâ VERIFICACI√ìN EXITOSA: Video listo para publicaci√≥n")
        return True
    else:
        print("‚ö†Ô∏è  VERIFICACI√ìN PARCIAL: Revisar manualmente antes de publicar")
        return False

async def subir_video_con_verificacion(video_path, descripcion="Video ASMR viral generado con IA"):
    """Subir video con verificaci√≥n exhaustiva del preview"""
    print(f"üé¨ INICIANDO SUBIDA CON VERIFICACI√ìN DE PREVIEW")
    print("=" * 60)
    print(f"üìπ Video: {os.path.basename(video_path)}")
    print(f"üìù Descripci√≥n: {descripcion}")
    
    async with async_playwright() as p:
        browser = await p.chromium.launch(
            headless=False,  # Mostrar para debugging
            args=[
                '--no-sandbox',
                '--disable-setuid-sandbox', 
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--disable-gpu',
                '--window-size=1920,1080'
            ]
        )
        
        context = await browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        )
        
        page = await context.new_page()
        
        try:
            # Cargar cookies
            cookies_loaded = await cargar_cookies(context, "config/upload_cookies_playwright.json")
            if not cookies_loaded:
                print("‚ùå No se pudieron cargar las cookies")
                return False
            
            # Ir directamente a la p√°gina de upload
            print("\nüì§ Navegando a p√°gina de upload...")
            await page.goto("https://www.tiktok.com/creator-center/upload", timeout=30000)
            await page.wait_for_load_state('domcontentloaded', timeout=15000)
            await asyncio.sleep(3)
            
            # Verificar que estamos en la p√°gina correcta
            if "upload" not in page.url:
                print(f"‚ùå No se pudo acceder a la p√°gina de upload. URL actual: {page.url}")
                return False
            
            print("‚úÖ P√°gina de upload cargada correctamente")
            
            # M√âTODO DRAG AND DROP (M√ÅS EXITOSO)
            print("\nüéØ Usando m√©todo DRAG AND DROP (exitoso comprobado)...")
            
            # Buscar √°rea de drop
            drop_area_selectors = [
                '[data-e2e="upload-input"]',
                '.upload-input',
                '.drop-area',
                '[class*="drop"]',
                '[class*="upload-area"]',
                'div[data-e2e="upload-input"]',
                '.upload-zone',
                'input[type="file"]'
            ]
            
            drop_area = None
            input_element = None
            
            for selector in drop_area_selectors:
                try:
                    element = await page.wait_for_selector(selector, timeout=10000)
                    if element:
                        print(f"‚úÖ √Årea de upload encontrada: {selector}")
                        
                        # Si es un input file, lo guardamos por separado
                        tag_name = await element.evaluate('el => el.tagName.toLowerCase()')
                        if tag_name == 'input':
                            input_element = element
                        else:
                            drop_area = element
                        break
                except:
                    continue
            
            if not drop_area and not input_element:
                print("‚ùå No se encontr√≥ √°rea de upload")
                return False
            
            # DRAG AND DROP IMPLEMENTATION
            print(f"\nüìÅ Iniciando DRAG AND DROP para: {video_path}")
            
            try:
                # M√©todo 1: Usar input file oculto si est√° disponible
                if input_element:
                    print("üîÑ Usando input file con drag and drop simulation...")
                    await input_element.set_input_files(video_path)
                    print("‚úÖ Archivo cargado via input file")
                    
                # M√©todo 2: Simulaci√≥n completa de drag and drop
                elif drop_area:
                    print("üîÑ Simulando drag and drop completo...")
                    
                    # Crear evento de drag and drop
                    await page.evaluate("""
                        async (selector, filePath) => {
                            const element = document.querySelector(selector);
                            if (!element) return false;
                            
                            // Simular drag over
                            const dragOverEvent = new DragEvent('dragover', {
                                bubbles: true,
                                cancelable: true,
                                dataTransfer: new DataTransfer()
                            });
                            element.dispatchEvent(dragOverEvent);
                            
                            // Simular drop
                            const dropEvent = new DragEvent('drop', {
                                bubbles: true,
                                cancelable: true,
                                dataTransfer: new DataTransfer()
                            });
                            element.dispatchEvent(dropEvent);
                            
                            return true;
                        }
                    """, selector)
                    
                    # Tambi√©n intentar con input file si existe
                    file_inputs = await page.query_selector_all('input[type="file"]')
                    if file_inputs:
                        await file_inputs[0].set_input_files(video_path)
                        print("‚úÖ Fallback: archivo cargado via input file oculto")
                
                print("‚úÖ DRAG AND DROP completado exitosamente")
                
            except Exception as e:
                print(f"‚ùå Error en drag and drop: {e}")
                
                # Fallback: m√©todo tradicional
                print("üîÑ Intentando m√©todo fallback...")
                try:
                    file_inputs = await page.query_selector_all('input[type="file"]')
                    if file_inputs:
                        await file_inputs[0].set_input_files(video_path)
                        print("‚úÖ Fallback exitoso")
                    else:
                        print("‚ùå No se pudo cargar el archivo")
                        return False
                except Exception as fallback_error:
                    print(f"‚ùå Fallback fall√≥: {fallback_error}")
                    return False
            
            # PASO CR√çTICO 1: Esperar 30 segundos despu√©s de cargar el video
            print("‚è≥ Esperando 30 segundos para que el video se procese completamente...")
            await asyncio.sleep(30)
            
            # PASO CR√çTICO 2: Buscar y hacer click en "Show More" o "Mostrar m√°s"
            print("\nüîç Buscando bot√≥n 'Show More' o 'Mostrar m√°s'...")
            show_more_selectors = [
                'text="Show more"',
                'text="Mostrar m√°s"',
                'text="Ver m√°s"',
                'button[aria-label*="Show more"]',
                'button[aria-label*="Mostrar"]',
                '[data-e2e="show-more"]',
                'button:has-text("Show more")',
                'button:has-text("Mostrar")',
                '.show-more',
                '[class*="show-more"]'
            ]
            
            show_more_clicked = False
            for selector in show_more_selectors:
                try:
                    show_more_btn = await page.wait_for_selector(selector, timeout=5000)
                    if show_more_btn:
                        await show_more_btn.click()
                        print(f"‚úÖ Click en 'Show More' exitoso: {selector}")
                        await asyncio.sleep(2)  # Esperar a que se expandan las opciones
                        show_more_clicked = True
                        break
                except:
                    continue
            
            if not show_more_clicked:
                print("‚ö†Ô∏è  No se encontr√≥ bot√≥n 'Show More', continuando...")
            
            # PASO CR√çTICO 3: Habilitar "AI Content" o contenido de IA
            print("\nü§ñ Buscando y habilitando opci√≥n 'AI Content'...")
            ai_content_selectors = [
                'text="AI-generated content"',
                'text="AI content"',
                'text="Contenido IA"',
                'text="Contenido generado por IA"',
                'input[type="checkbox"][id*="ai"]',
                'input[type="checkbox"][name*="ai"]',
                '[data-e2e="ai-content"]',
                'label:has-text("AI")',
                'label:has-text("IA")',
                'input[value*="ai"]',
                'switch:has-text("AI")'
            ]
            
            ai_content_enabled = False
            for selector in ai_content_selectors:
                try:
                    ai_element = await page.wait_for_selector(selector, timeout=5000)
                    if ai_element:
                        # Si es un checkbox o switch, verificar si ya est√° habilitado
                        tag_name = await ai_element.evaluate('el => el.tagName.toLowerCase()')
                        
                        if tag_name == 'input':
                            is_checked = await ai_element.is_checked()
                            if not is_checked:
                                await ai_element.click()
                                print(f"‚úÖ AI Content habilitado: {selector}")
                                ai_content_enabled = True
                            else:
                                print(f"‚úÖ AI Content ya estaba habilitado: {selector}")
                                ai_content_enabled = True
                        else:
                            # Para otros elementos, simplemente hacer click
                            await ai_element.click()
                            print(f"‚úÖ Click en AI Content: {selector}")
                            ai_content_enabled = True
                        
                        await asyncio.sleep(2)
                        break
                except:
                    continue
            
            if not ai_content_enabled:
                print("‚ö†Ô∏è  No se encontr√≥ opci√≥n 'AI Content', continuando...")
            
            # PASO CR√çTICO 4: Manejar modal de confirmaci√≥n de AI Content
            print("\nüìã Verificando si aparece modal de confirmaci√≥n...")
            modal_selectors = [
                '[role="dialog"]',
                '.modal',
                '[data-e2e="modal"]',
                'div[class*="modal"]',
                'div[class*="dialog"]'
            ]
            
            modal_found = False
            for selector in modal_selectors:
                try:
                    modal = await page.wait_for_selector(selector, timeout=5000)
                    if modal:
                        print(f"‚úÖ Modal detectado: {selector}")
                        
                        # Buscar bot√≥n de aceptar en el modal
                        accept_selectors = [
                            'text="Accept"',
                            'text="Aceptar"',
                            'text="OK"',
                            'text="Confirm"',
                            'text="Confirmar"',
                            'text="Continue"',
                            'text="Continuar"',
                            'button[data-e2e="confirm"]',
                            'button[class*="confirm"]',
                            'button[class*="accept"]'
                        ]
                        
                        accept_clicked = False
                        for accept_selector in accept_selectors:
                            try:
                                accept_btn = await modal.wait_for_selector(accept_selector, timeout=3000)
                                if accept_btn:
                                    await accept_btn.click()
                                    print(f"‚úÖ Click en aceptar modal: {accept_selector}")
                                    await asyncio.sleep(2)
                                    accept_clicked = True
                                    modal_found = True
                                    break
                            except:
                                continue
                        
                        if not accept_clicked:
                            print("‚ö†Ô∏è  Modal encontrado pero no se pudo hacer click en aceptar")
                        break
                except:
                    continue
            
            if not modal_found:
                print("‚ÑπÔ∏è  No apareci√≥ modal de confirmaci√≥n")
            
            # Agregar descripci√≥n
            print("\nüìù Agregando descripci√≥n...")
            description_selectors = [
                '[data-e2e="video-caption"]',
                'textarea[placeholder*="description"]',
                'textarea[placeholder*="caption"]',
                'div[contenteditable="true"]'
            ]
            
            for selector in description_selectors:
                try:
                    desc_input = await page.wait_for_selector(selector, timeout=5000)
                    if desc_input:
                        await desc_input.click()
                        await desc_input.fill(descripcion)
                        print(f"‚úÖ Descripci√≥n agregada usando: {selector}")
                        break
                except:
                    continue
            
            # VERIFICACI√ìN EXHAUSTIVA DEL PREVIEW
            verification_success = await verificar_preview_video(page, timeout=60)
            
            if verification_success:
                # PASO CR√çTICO 5: Esperar 30 segundos antes de publicar
                print("\n‚è≥ Esperando 30 segundos adicionales antes de publicar...")
                await asyncio.sleep(30)
                
                # Intentar publicar
                print("\nüöÄ Intentando publicar video...")
                
                publish_selectors = [
                    '[data-e2e="post-btn"]',
                    'button[type="submit"]',
                    'text="Post"',
                    'text="Publicar"',
                    'button[class*="post"]',
                    'button:has-text("Post")',
                    'button:has-text("Publicar")'
                ]
                
                published = False
                for selector in publish_selectors:
                    try:
                        publish_btn = await page.wait_for_selector(selector, timeout=10000)
                        if publish_btn and not await publish_btn.is_disabled():
                            await publish_btn.click()
                            print(f"‚úÖ Click en bot√≥n publicar: {selector}")
                            
                            # PASO CR√çTICO 6: Manejar modal de confirmaci√≥n post-publicaci√≥n
                            print("\nüìã Verificando modal post-publicaci√≥n...")
                            await asyncio.sleep(3)  # Esperar a que aparezca el modal
                            
                            # Buscar y manejar cualquier modal que aparezca
                            post_modal_selectors = [
                                '[role="dialog"]',
                                '.modal',
                                '[data-e2e="modal"]',
                                'div[class*="modal"]',
                                'div[class*="dialog"]',
                                'div[class*="confirm"]'
                            ]
                            
                            modal_handled = False
                            for modal_selector in post_modal_selectors:
                                try:
                                    post_modal = await page.wait_for_selector(modal_selector, timeout=5000)
                                    if post_modal:
                                        print(f"‚úÖ Modal post-publicaci√≥n detectado: {modal_selector}")
                                        
                                        # Buscar bot√≥n de aceptar/confirmar en el modal
                                        modal_accept_selectors = [
                                            'text="Accept"',
                                            'text="Aceptar"',
                                            'text="OK"',
                                            'text="Confirm"',
                                            'text="Confirmar"',
                                            'text="Continue"',
                                            'text="Continuar"',
                                            'text="Agree"',
                                            'text="De acuerdo"',
                                            'text="Submit"',
                                            'text="Enviar"',
                                            'button[data-e2e="confirm"]',
                                            'button[data-e2e="accept"]',
                                            'button[class*="confirm"]',
                                            'button[class*="accept"]',
                                            'button[class*="primary"]'
                                        ]
                                        
                                        modal_accept_clicked = False
                                        for accept_selector in modal_accept_selectors:
                                            try:
                                                accept_btn = await post_modal.wait_for_selector(accept_selector, timeout=3000)
                                                if accept_btn:
                                                    await accept_btn.click()
                                                    print(f"‚úÖ Click en aceptar modal post-publicaci√≥n: {accept_selector}")
                                                    await asyncio.sleep(2)
                                                    modal_accept_clicked = True
                                                    modal_handled = True
                                                    break
                                            except:
                                                continue
                                        
                                        if modal_accept_clicked:
                                            break
                                except:
                                    continue
                            
                            if not modal_handled:
                                print("‚ÑπÔ∏è  No apareci√≥ modal post-publicaci√≥n o ya fue manejado")
                            
                            published = True
                            
                            # Esperar confirmaci√≥n final
                            print("‚è≥ Esperando confirmaci√≥n final de publicaci√≥n...")
                            await asyncio.sleep(10)
                            break
                    except Exception as e:
                        print(f"‚ö†Ô∏è  Error intentando publicar con {selector}: {e}")
                        continue
                
                if published:
                    print("üéâ VIDEO SUBIDO Y PUBLICADO EXITOSAMENTE")
                    return True
                else:
                    print("‚ö†Ô∏è  Video verificado pero no se pudo publicar autom√°ticamente")
                    print("üí° Revisar manualmente y publicar desde la interfaz")
                    return False
            else:
                print("‚ùå VERIFICACI√ìN DEL PREVIEW FALL√ì")
                print("üîß RECOMENDACIONES:")
                print("   1. Verificar formato del video (MP4, H.264)")
                print("   2. Comprobar resoluci√≥n (720x1280 recomendado)")
                print("   3. Verificar duraci√≥n del video")
                print("   4. Revisar manualmente en la interfaz")
                return False
                
        except Exception as e:
            print(f"‚ùå Error durante la subida: {e}")
            return False
        finally:
            # Mantener browser abierto para inspecci√≥n manual
            print("\nüîç Browser se mantendr√° abierto 30s para inspecci√≥n manual...")
            await asyncio.sleep(30)
            await browser.close()

async def main():
    """Funci√≥n principal"""
    load_dotenv()
    
    print("üé¨ UPLOADER TIKTOK CON VERIFICACI√ìN DE PREVIEW MEJORADA")
    print("=" * 70)
    
    # Usar el video fundido como ejemplo
    video_path = os.path.join("data", "videos", "final", "videos_unidos_FUNDIDO_TIKTOK.mp4")
    
    if not os.path.exists(video_path):
        print(f"‚ùå Video no encontrado: {video_path}")
        return
    
    print(f"üìπ Subiendo video: {os.path.basename(video_path)}")
    print(f"üìè Tama√±o: {os.path.getsize(video_path) / (1024*1024):.1f} MB")
    
    success = await subir_video_con_verificacion(
        video_path,
        "üé≠ Video ASMR viral con IA | Contenido hipn√≥tico y relajante #ASMR #IA #Viral #Satisfying"
    )
    
    if success:
        print("\nüéâ ¬°MISI√ìN CUMPLIDA! Video subido exitosamente")
    else:
        print("\n‚ö†Ô∏è  Subida no completada autom√°ticamente - revisar manualmente")

if __name__ == "__main__":
    asyncio.run(main())
