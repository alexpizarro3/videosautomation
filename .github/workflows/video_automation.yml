name: TikTok Video Automation

on:
  schedule:
    # Ejecutar 3 veces al d√≠a: 9:00, 15:00, 21:00 UTC
    - cron: '0 9 * * *'   # 9:00 AM UTC
    - cron: '0 15 * * *'  # 3:00 PM UTC  
    - cron: '0 21 * * *'  # 9:00 PM UTC
  
  workflow_dispatch:
    inputs:
      username:
        description: 'TikTok username to analyze'
        required: true
        default: 'your_username'
      max_videos:
        description: 'Maximum videos to analyze'
        required: false
        default: '50'
      create_videos:
        description: 'Number of videos to create'
        required: false
        default: '3'
      dry_run:
        description: 'Run without uploading videos'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  
jobs:
  automation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          wget \
          gnupg \
          unzip \
          curl \
          xvfb \
          libxi6 \
          libgconf-2-4 \
          libxss1 \
          libxrandr2 \
          libasound2 \
          libpangocairo-1.0-0 \
          libatk1.0-0 \
          libcairo-gobject2 \
          libgtk-3-0 \
          libgdk-pixbuf2.0-0 \
          ffmpeg
    
    - name: Install Chrome and ChromeDriver
      run: |
        # Install Chrome
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Install ChromeDriver
        CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f3 | cut -d '.' -f1)
        CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}")
        wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
        sudo unzip /tmp/chromedriver.zip -d /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup environment variables
      run: |
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
        echo "VEO3_API_KEY=${{ secrets.VEO3_API_KEY }}" >> $GITHUB_ENV
        echo "TIKTOK_USERNAME=${{ secrets.TIKTOK_USERNAME }}" >> $GITHUB_ENV
        echo "TIKTOK_PASSWORD=${{ secrets.TIKTOK_PASSWORD }}" >> $GITHUB_ENV
    
    - name: Setup TikTok cookies
      run: |
        echo '${{ secrets.TIKTOK_COOKIES }}' > config/tiktok_cookies.json
    
    - name: Create data directories
      run: |
        mkdir -p data/{metrics,images,videos,prompts,sessions}
        mkdir -p logs
    
    - name: Run automation (Scheduled)
      if: github.event_name == 'schedule'
      run: |
        cd src
        python main.py \
          --username "${{ secrets.TIKTOK_USERNAME }}" \
          --max-videos 50 \
          --create-videos 1
    
    - name: Run automation (Manual)
      if: github.event_name == 'workflow_dispatch'
      run: |
        cd src
        python main.py \
          --username "${{ github.event.inputs.username }}" \
          --max-videos "${{ github.event.inputs.max_videos }}" \
          --create-videos "${{ github.event.inputs.create_videos }}" \
          ${{ github.event.inputs.dry_run == 'true' && '--dry-run' || '' }}
    
    - name: Upload logs as artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: automation-logs-${{ github.run_number }}
        path: |
          logs/
          data/sessions/
        retention-days: 30
    
    - name: Upload generated content (if dry-run)
      if: github.event.inputs.dry_run == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: generated-content-${{ github.run_number }}
        path: |
          data/images/
          data/videos/
        retention-days: 7
    
    - name: Cleanup temporary files
      if: always()
      run: |
        # Limpiar archivos temporales pero mantener logs
        find data/images/ -name "*.jpg" -mtime +1 -delete 2>/dev/null || true
        find data/videos/ -name "*.mp4" -mtime +1 -delete 2>/dev/null || true
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Automation failed at $(date)"
        # Aqu√≠ podr√≠as agregar notificaciones por email, Slack, etc.
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"TikTok automation failed"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ Automation completed successfully at $(date)"
        # Notificaci√≥n de √©xito opcional
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"TikTok automation completed successfully"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job opcional para verificar estado
  health-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Check system health
      run: |
        echo "üîç Checking system health..."
        echo "Current time: $(date)"
        echo "Available disk space:"
        df -h
        echo "Memory usage:"
        free -h
        
    - name: Verify secrets
      run: |
        if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
          echo "‚ùå GEMINI_API_KEY not set"
          exit 1
        fi
        
        if [ -z "${{ secrets.VEO3_API_KEY }}" ]; then
          echo "‚ùå VEO3_API_KEY not set"
          exit 1
        fi
        
        if [ -z "${{ secrets.TIKTOK_USERNAME }}" ]; then
          echo "‚ùå TIKTOK_USERNAME not set"
          exit 1
        fi
        
        if [ -z "${{ secrets.TIKTOK_COOKIES }}" ]; then
          echo "‚ùå TIKTOK_COOKIES not set"
          exit 1
        fi
        
        echo "‚úÖ All required secrets are configured"
