#!/usr/bin/env python3
"""
An√°lisis COMPLETO de m√©tricas de TikTok
Extrae TODOS los videos para an√°lisis profundo
"""

import os
import json
import time
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from dotenv import load_dotenv

def setup_driver():
    """Configurar Chrome driver optimizado"""
    chrome_options = Options()
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    driver = webdriver.Chrome(options=chrome_options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    return driver

def load_cookies(driver):
    """Cargar cookies de TikTok"""
    cookies_file = "data/tiktok_cookies.json"
    
    if not os.path.exists(cookies_file):
        print(f"‚ùå Archivo de cookies no encontrado: {cookies_file}")
        return False
    
    try:
        driver.get("https://www.tiktok.com")
        time.sleep(2)
        
        with open(cookies_file, 'r', encoding='utf-8') as f:
            cookies = json.load(f)
        
        for name, value in cookies.items():
            try:
                driver.add_cookie({
                    'name': name,
                    'value': value,
                    'domain': '.tiktok.com'
                })
            except:
                pass
        
        print(f"‚úÖ Cookies cargadas: {len(cookies)} cookies")
        return True
        
    except Exception as e:
        print(f"‚ùå Error cargando cookies: {e}")
        return False

def extract_all_videos_metrics(driver, username, max_scroll=10):
    """Extraer m√©tricas de TODOS los videos disponibles"""
    print(f"üé¨ Extrayendo m√©tricas de TODOS los videos disponibles")
    print(f"üìú M√°ximo de scrolls: {max_scroll}")
    
    try:
        # Ir al perfil
        profile_url = f"https://www.tiktok.com/@{username}"
        driver.get(profile_url)
        time.sleep(5)
        
        all_videos = []
        videos_found_count = 0
        scroll_count = 0
        
        while scroll_count < max_scroll:
            print(f"   üîç Scroll {scroll_count + 1}/{max_scroll}...")
            
            # Buscar todos los videos en la p√°gina actual
            video_selectors = [
                "[data-e2e='user-post-item']",
                "div[class*='video']",
                "a[href*='/video/']"
            ]
            
            current_videos = []
            for selector in video_selectors:
                try:
                    elements = driver.find_elements(By.CSS_SELECTOR, selector)
                    current_videos.extend(elements)
                except:
                    continue
            
            # Procesar videos encontrados en este scroll
            new_videos_count = 0
            for i, video_element in enumerate(current_videos):
                try:
                    # Verificar si ya procesamos este video
                    link_element = video_element.find_element(By.TAG_NAME, "a")
                    video_url = link_element.get_attribute("href")
                    
                    if not video_url or any(v.get('url') == video_url for v in all_videos):
                        continue  # Video ya procesado
                    
                    # Hacer scroll al video para que cargue las m√©tricas
                    driver.execute_script("arguments[0].scrollIntoView(true);", video_element)
                    time.sleep(0.5)
                    
                    # Extraer m√©tricas del video
                    video_metrics = {
                        'url': video_url,
                        'video_id': video_url.split('/')[-1] if '/' in video_url else 'unknown',
                        'position': videos_found_count + new_videos_count + 1
                    }
                    
                    # Buscar n√∫meros (views, likes, etc.)
                    try:
                        numbers = video_element.find_elements(By.XPATH, ".//strong | .//span[contains(@class, 'count')] | .//*[contains(text(), 'K')] | .//*[contains(text(), 'M')] | .//*[text()[string-length(.) > 0 and string-length(.) < 10 and translate(., '0123456789KM', '') = '']]")
                        
                        metrics_extracted = {}
                        for j, num_element in enumerate(numbers):
                            text = num_element.text.strip()
                            if text and (text.isdigit() or 'K' in text or 'M' in text):
                                metrics_extracted[f"metric_{j+1}"] = text
                        
                        video_metrics['metrics'] = metrics_extracted
                        
                        # Intentar obtener imagen thumbnail
                        try:
                            img_element = video_element.find_element(By.TAG_NAME, "img")
                            thumbnail = img_element.get_attribute("src")
                            if thumbnail:
                                video_metrics['thumbnail'] = thumbnail
                        except:
                            pass
                        
                    except Exception as e:
                        video_metrics['metrics'] = {}
                        video_metrics['error'] = str(e)
                    
                    all_videos.append(video_metrics)
                    new_videos_count += 1
                    
                    # Mostrar progreso cada 5 videos
                    if (videos_found_count + new_videos_count) % 5 == 0:
                        print(f"      üìä Procesados {videos_found_count + new_videos_count} videos...")
                    
                except Exception as e:
                    continue
            
            videos_found_count += new_videos_count
            
            if new_videos_count == 0:
                print(f"      ‚ö†Ô∏è  No se encontraron videos nuevos en este scroll")
                # Intentar scroll m√°s agresivo
                driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(2)
                
                # Si no encontramos videos en 2 scrolls consecutivos, parar
                if scroll_count > 0:
                    print(f"      üîö No hay m√°s videos disponibles")
                    break
            else:
                print(f"      ‚úÖ Encontrados {new_videos_count} videos nuevos (Total: {videos_found_count})")
            
            # Hacer scroll hacia abajo para cargar m√°s contenido
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(3)  # Esperar a que cargue el contenido
            
            scroll_count += 1
        
        print(f"\nüéâ An√°lisis completo: {len(all_videos)} videos procesados")
        return all_videos
        
    except Exception as e:
        print(f"‚ùå Error extrayendo videos: {e}")
        return []

def analyze_complete_performance(videos_data):
    """An√°lisis profundo de todos los videos"""
    print(f"\nüìà AN√ÅLISIS PROFUNDO DE {len(videos_data)} VIDEOS")
    print("=" * 50)
    
    if not videos_data:
        print("‚ùå No hay datos para analizar")
        return None
    
    # Extraer todas las m√©tricas num√©ricas
    all_views = []
    all_metrics = []
    
    for video in videos_data:
        metrics = video.get('metrics', {})
        for key, value in metrics.items():
            if isinstance(value, str):
                # Convertir K, M a n√∫meros
                numeric_value = convert_to_number(value)
                if numeric_value > 0:
                    all_views.append(numeric_value)
                    all_metrics.append({
                        'video_id': video.get('video_id', 'unknown'),
                        'metric': key,
                        'value': numeric_value,
                        'original': value,
                        'url': video.get('url', '')
                    })
    
    if not all_views:
        print("‚ùå No se pudieron extraer m√©tricas num√©ricas")
        return None
    
    # Estad√≠sticas generales
    total_videos = len(videos_data)
    avg_views = sum(all_views) / len(all_views)
    max_views = max(all_views)
    min_views = min(all_views)
    median_views = sorted(all_views)[len(all_views)//2]
    
    print(f"üìä ESTAD√çSTICAS GENERALES:")
    print(f"   üé¨ Total de videos: {total_videos}")
    print(f"   üìà Promedio de views: {avg_views:.0f}")
    print(f"   üèÜ Mejor video: {max_views:,} views")
    print(f"   üìâ Menor video: {min_views:,} views")
    print(f"   üéØ Mediana: {median_views:.0f} views")
    print(f"   üìä Rango: {max_views/max(min_views,1):.1f}x diferencia")
    
    # Top 5 videos
    top_videos = sorted(all_metrics, key=lambda x: x['value'], reverse=True)[:5]
    print(f"\nüèÜ TOP 5 VIDEOS:")
    for i, video in enumerate(top_videos, 1):
        print(f"   {i}. {video['value']:,} views - ID: {video['video_id']}")
    
    # An√°lisis de tendencias
    print(f"\nüìà AN√ÅLISIS DE TENDENCIAS:")
    
    # Categorizar videos por rendimiento
    high_performance = [v for v in all_views if v > avg_views * 1.5]
    low_performance = [v for v in all_views if v < avg_views * 0.5]
    
    print(f"   üî• Videos high-performance: {len(high_performance)} ({len(high_performance)/total_videos*100:.1f}%)")
    print(f"   üìâ Videos low-performance: {len(low_performance)} ({len(low_performance)/total_videos*100:.1f}%)")
    print(f"   ‚≠ê Videos average: {total_videos - len(high_performance) - len(low_performance)}")
    
    # C√°lculo de consistency score
    import statistics
    try:
        std_dev = statistics.stdev(all_views)
        consistency_score = 1 - (std_dev / avg_views)
        print(f"   üéØ Consistency Score: {consistency_score:.2f} (0-1, m√°s alto = m√°s consistente)")
    except:
        consistency_score = 0
    
    return {
        'total_videos': total_videos,
        'avg_views': avg_views,
        'max_views': max_views,
        'min_views': min_views,
        'median_views': median_views,
        'high_performance_count': len(high_performance),
        'low_performance_count': len(low_performance),
        'consistency_score': consistency_score,
        'top_videos': top_videos,
        'all_metrics': all_metrics
    }

def convert_to_number(value_str):
    """Convertir strings como '1.2K', '500', '1M' a n√∫meros"""
    if not isinstance(value_str, str):
        return 0
    
    value_str = value_str.strip().replace(',', '')
    
    try:
        if 'K' in value_str:
            return int(float(value_str.replace('K', '')) * 1000)
        elif 'M' in value_str:
            return int(float(value_str.replace('M', '')) * 1000000)
        elif value_str.isdigit():
            return int(value_str)
        else:
            return 0
    except:
        return 0

def main():
    """Funci√≥n principal para an√°lisis completo"""
    print("üîç AN√ÅLISIS COMPLETO DE TIKTOK")
    print("üë§ Cuenta: @chakakitafreakyvideos")
    print("üéØ Extrayendo TODOS los videos disponibles")
    print("=" * 60)
    
    load_dotenv()
    username = os.getenv('TIKTOK_USERNAME', 'chakakitafreakyvideos')
    
    driver = None
    
    try:
        # Configurar y cargar
        print("üåê Configurando navegador...")
        driver = setup_driver()
        
        print("üç™ Cargando cookies...")
        if not load_cookies(driver):
            return
        
        driver.refresh()
        time.sleep(3)
        
        # Extraer TODOS los videos
        all_videos = extract_all_videos_metrics(driver, username, max_scroll=20)  # Aumentado a 20 scrolls
        
        if not all_videos:
            print("‚ùå No se pudieron extraer videos")
            return
        
        # An√°lisis profundo
        analysis = analyze_complete_performance(all_videos)
        
        # Guardar resultados completos
        complete_data = {
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'username': username,
            'total_videos_found': len(all_videos),
            'analysis': analysis,
            'all_videos_data': all_videos
        }
        
        os.makedirs('data/analytics', exist_ok=True)
        results_file = f"data/analytics/complete_analysis_{int(time.time())}.json"
        
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(complete_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÅ An√°lisis completo guardado en: {results_file}")
        
        if analysis:
            print(f"\nüí° RECOMENDACIONES BASADAS EN {analysis['total_videos']} VIDEOS:")
            
            if analysis['consistency_score'] > 0.7:
                print("‚úÖ Tu contenido es muy consistente")
            elif analysis['consistency_score'] > 0.4:
                print("‚ö†Ô∏è  Tu contenido tiene rendimiento variable")
            else:
                print("üîÑ Oportunidad de mejorar consistencia")
            
            if analysis['high_performance_count'] > analysis['total_videos'] * 0.3:
                print("üî• Tienes buen porcentaje de videos virales")
            else:
                print("üìà Oportunidad de aumentar videos high-performance")
        
    except Exception as e:
        print(f"‚ùå Error general: {e}")
    
    finally:
        if driver:
            input("\n‚è∏Ô∏è  Presiona ENTER para cerrar el navegador...")
            driver.quit()

if __name__ == "__main__":
    main()
