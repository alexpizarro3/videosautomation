#!/usr/bin/env python3
"""
üéØ UPLOADER TIKTOK ULTRA STEALTH V5 - SELENIUM ESTABLE
Versi√≥n V5 usando Selenium estable con m√°xima anti-detecci√≥n manual
Mantiene toda la l√≥gica del V4 modificado pero con Selenium estable
"""

import json
import os
import random
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException

def cargar_cookies(driver, cookies_path):
    """Cargar cookies de sesi√≥n - Selenium version"""
    try:
        with open(cookies_path, 'r') as f:
            cookies = json.load(f)
        
        # Ir a TikTok primero para cargar cookies
        driver.get("https://www.tiktok.com")
        time.sleep(3)
        
        cookies_loaded = 0
        for cookie in cookies:
            try:
                # Convertir formato Playwright a Selenium
                selenium_cookie = {
                    'name': cookie['name'],
                    'value': cookie['value'],
                    'domain': cookie.get('domain', '.tiktok.com'),
                    'path': cookie.get('path', '/'),
                }
                
                # Agregar campos opcionales si existen
                if 'secure' in cookie:
                    selenium_cookie['secure'] = cookie['secure']
                if 'httpOnly' in cookie:
                    selenium_cookie['httpOnly'] = cookie['httpOnly']
                
                driver.add_cookie(selenium_cookie)
                cookies_loaded += 1
            except Exception as e:
                print(f"   ‚ö†Ô∏è Error con cookie {cookie.get('name', 'unknown')}: {e}")
                continue
        
        print(f"‚úÖ Cookies cargadas: {cookies_loaded}/{len(cookies)} desde {cookies_path}")
        return True
    except Exception as e:
        print(f"‚ùå Error cargando cookies: {e}")
        return False

def setup_stealth_chrome():
    """Configurar Chrome con m√°xima anti-detecci√≥n manual"""
    print("üõ°Ô∏è Configurando Chrome con anti-detecci√≥n extrema...")
    
    options = Options()
    
    # Configuraci√≥n anti-detecci√≥n b√°sica
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-blink-features=AutomationControlled')
    options.add_argument('--disable-extensions')
    options.add_argument('--no-first-run')
    options.add_argument('--disable-default-apps')
    options.add_argument('--disable-infobars')
    options.add_argument('--start-maximized')
    options.add_argument('--window-size=1920,1080')
    options.add_argument('--disable-web-security')
    options.add_argument('--disable-features=VizDisplayCompositor')
    options.add_argument('--disable-background-timer-throttling')
    options.add_argument('--disable-backgrounding-occluded-windows')
    options.add_argument('--disable-renderer-backgrounding')
    options.add_argument('--disable-field-trial-config')
    options.add_argument('--disable-back-forward-cache')
    options.add_argument('--disable-backgrounding-occluded-windows')
    options.add_argument('--disable-features=TranslateUI')
    options.add_argument('--disable-ipc-flooding-protection')
    
    # User agent espec√≠fico para Windows
    options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
    
    # Configuraci√≥n de perfil persistente
    profile_dir = os.path.join(os.getcwd(), "chrome_profile_selenium_stable")
    if not os.path.exists(profile_dir):
        os.makedirs(profile_dir)
        print(f"üìÅ Creado directorio de perfil: {profile_dir}")
    else:
        print(f"üìÅ Usando perfil existente: {profile_dir}")
    
    options.add_argument(f'--user-data-dir={profile_dir}')
    
    # Configuraci√≥n adicional para evitar detecci√≥n
    prefs = {
        "profile.default_content_setting_values": {
            "notifications": 2,
            "geolocation": 1,
            "media_stream": 1,
        },
        "profile.managed_default_content_settings": {
            "images": 1
        },
        "profile.content_settings.exceptions.automatic_downloads.*.setting": 1,
        "profile.default_content_settings.popups": 0,
        "managed_default_content_settings.images": 1
    }
    options.add_experimental_option("prefs", prefs)
    options.add_experimental_option("excludeSwitches", ["enable-automation", "enable-logging"])
    options.add_experimental_option('useAutomationExtension', False)
    
    return options

def apply_stealth_scripts(driver):
    """Aplicar scripts anti-detecci√≥n despu√©s de crear el driver"""
    print("üïµÔ∏è Aplicando scripts de stealth extremo...")
    
    # Script anti-detecci√≥n completo
    stealth_script = """
        // Eliminar propiedades de webdriver
        Object.defineProperty(navigator, 'webdriver', {
            get: () => undefined,
        });
        
        // Simular plugins reales
        Object.defineProperty(navigator, 'plugins', {
            get: () => [
                {
                    0: {type: "application/x-google-chrome-pdf", suffixes: "pdf", description: "Portable Document Format", enabledPlugin: Plugin},
                    description: "Portable Document Format",
                    filename: "internal-pdf-viewer",
                    length: 1,
                    name: "Chrome PDF Plugin"
                },
                {
                    0: {type: "application/pdf", suffixes: "pdf", description: "", enabledPlugin: Plugin},
                    description: "",
                    filename: "mhjfbmdgcfjbbpaeojofohoefgiehjai",
                    length: 1,
                    name: "Chrome PDF Viewer"
                }
            ],
        });
        
        // Configurar idiomas
        Object.defineProperty(navigator, 'languages', {
            get: () => ['es-MX', 'es', 'en-US', 'en'],
        });
        
        // Simular Chrome runtime
        window.chrome = {
            runtime: {
                onConnect: undefined,
                onMessage: undefined,
            },
        };
        
        // Simular permisos
        Object.defineProperty(navigator, 'permissions', {
            get: () => ({
                query: () => Promise.resolve({ state: 'granted' }),
            }),
        });
        
        // Modificar deviceMemory
        Object.defineProperty(navigator, 'deviceMemory', {
            get: () => 8,
        });
        
        // Modificar hardwareConcurrency
        Object.defineProperty(navigator, 'hardwareConcurrency', {
            get: () => 4,
        });
        
        // Eliminar rastros de automatizaci√≥n
        delete window.cdc_adoQpoasnfa76pfcZLmcfl_Array;
        delete window.cdc_adoQpoasnfa76pfcZLmcfl_Promise;
        delete window.cdc_adoQpoasnfa76pfcZLmcfl_Symbol;
        
        // Simular comportamiento de mouse real
        const originalAddEventListener = EventTarget.prototype.addEventListener;
        EventTarget.prototype.addEventListener = function(type, listener, options) {
            if (type === 'mousedown' || type === 'mouseup' || type === 'click') {
                // Simular eventos de mouse m√°s naturales
            }
            return originalAddEventListener.call(this, type, listener, options);
        };
        
        // Override toString para ocultar automation
        const originalToString = Function.prototype.toString;
        Function.prototype.toString = function() {
            if (this === navigator.webdriver) {
                return 'function webdriver() { [native code] }';
            }
            return originalToString.call(this);
        };
    """
    
    try:
        driver.execute_script(stealth_script)
        print("‚úÖ Scripts de stealth aplicados correctamente")
    except Exception as e:
        print(f"‚ö†Ô∏è Error aplicando scripts stealth: {e}")

def movimiento_humano_realista(driver):
    """Simula movimientos de mouse completamente humanos"""
    try:
        actions = ActionChains(driver)
        
        # Obtener dimensiones de la ventana
        size = driver.get_window_size()
        viewport_width = size['width']
        viewport_height = size['height']
        
        # Posici√≥n aleatoria dentro de la ventana
        x = random.randint(100, min(1200, viewport_width - 100))
        y = random.randint(100, min(800, viewport_height - 100))
        
        # Movimiento en pasos para parecer m√°s humano
        current_pos = driver.execute_script("return [window.innerWidth/2, window.innerHeight/2]")
        steps = random.randint(3, 8)
        
        for i in range(steps):
            intermediate_x = current_pos[0] + (x - current_pos[0]) * (i + 1) / steps
            intermediate_y = current_pos[1] + (y - current_pos[1]) * (i + 1) / steps
            
            # Usar JavaScript para mover el cursor (m√°s suave)
            driver.execute_script(f"""
                var event = new MouseEvent('mousemove', {{
                    'view': window,
                    'bubbles': true,
                    'cancelable': true,
                    'clientX': {intermediate_x + random.randint(-3, 3)},
                    'clientY': {intermediate_y + random.randint(-3, 3)}
                }});
                document.dispatchEvent(event);
            """)
            time.sleep(random.uniform(0.05, 0.15))
        
        time.sleep(random.uniform(0.5, 2.0))
        
        # Scroll ocasional
        if random.random() < 0.3:
            scroll_amount = random.randint(-100, 100)
            driver.execute_script(f"window.scrollBy(0, {scroll_amount})")
            time.sleep(random.uniform(0.3, 1.0))
            
    except Exception as e:
        print(f"   ‚ö†Ô∏è Error en movimiento humano: {e}")

def escribir_como_humano(element, texto, driver):
    """Escribe texto como un humano real"""
    try:
        # Focus en el elemento
        driver.execute_script("arguments[0].focus();", element)
        time.sleep(random.uniform(0.2, 0.8))
        
        # Limpiar campo
        element.clear()
        time.sleep(random.uniform(0.1, 0.3))
        
        # Escribir caracter por caracter con timing humano
        for i, char in enumerate(texto):
            element.send_keys(char)
            
            # Pausas naturales
            if char == ' ':
                time.sleep(random.uniform(0.1, 0.3))
            elif char in '.,!?':
                time.sleep(random.uniform(0.2, 0.5))
            elif i > 0 and i % random.randint(8, 15) == 0:
                time.sleep(random.uniform(0.1, 0.4))
            else:
                time.sleep(random.uniform(0.05, 0.15))
                
    except Exception as e:
        print(f"   ‚ùå Error escribiendo texto: {e}")

def activar_ai_content_xpath_especifico(driver):
    """AJUSTE #3: Activaci√≥n con XPath espec√≠fico del usuario"""
    print("\nüéØ ACTIVACI√ìN AI CONTENT CON XPATH ESPEC√çFICO...")
    
    xpath_ai_toggle = '//*[@id="root"]/div/div/div[2]/div[2]/div/div/div/div[4]/div[1]/div[4]/div[1]/div[3]/div[3]/div/div/div/div/span'
    
    try:
        print(f"üîç Usando XPath espec√≠fico: {xpath_ai_toggle}")
        
        # Scroll adicional
        print("   üìú Haciendo scroll para asegurar visibilidad...")
        driver.execute_script("window.scrollBy(0, 300)")
        time.sleep(2)
        
        # Buscar elemento por XPath
        try:
            ai_toggle = driver.find_element(By.XPATH, xpath_ai_toggle)
            print("   üìç Elemento AI toggle encontrado con XPath")
            
            tag_name = ai_toggle.tag_name
            class_name = ai_toggle.get_attribute('class')
            
            print(f"   üìã Tag: {tag_name}")
            print(f"   üìã Clases: {class_name}")
            
            is_visible = ai_toggle.is_displayed()
            print(f"   üëÅÔ∏è Elemento visible: {is_visible}")
            
            if not is_visible:
                print("   üìú Forzando visibilidad...")
                driver.execute_script("""
                    arguments[0].style.display = 'block';
                    arguments[0].style.visibility = 'visible';
                    arguments[0].style.opacity = '1';
                    arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});
                """, ai_toggle)
                time.sleep(3)
            
            # Hover y click
            print("   üñ±Ô∏è Hover y click...")
            actions = ActionChains(driver)
            actions.move_to_element(ai_toggle).perform()
            time.sleep(1)
            
            driver.execute_script("arguments[0].click();", ai_toggle)
            print("‚úÖ AI Content toggle clickeado con XPath espec√≠fico")
            
            # Buscar modal de confirmaci√≥n con m√°s opciones
            print("   üîç Buscando modal de confirmaci√≥n AI Content...")
            time.sleep(2)
            
            modal_selectors = [
                "//button[contains(text(), 'Turn on')]",
                "//button[contains(text(), 'Aceptar')]",
                "//button[contains(text(), 'Accept')]",
                "//button[contains(text(), 'Confirmar')]",
                "//button[contains(text(), 'Continuar')]",
                "//button[contains(text(), 'Continue')]",
                "//button[contains(text(), 'OK')]",
                "//button[contains(text(), 'Confirm')]",
                "//button[contains(text(), 'Got it')]",
                "//button[contains(@class, 'primary')] | //button[contains(@class, 'confirm')]"
            ]
            
            for selector in modal_selectors:
                try:
                    modal_button = driver.find_element(By.XPATH, selector)
                    if modal_button.is_displayed():
                        button_text = modal_button.text
                        print(f"   üìç Modal encontrado - Bot√≥n: '{button_text}'")
                        driver.execute_script("arguments[0].click();", modal_button)
                        print(f"   ‚úÖ Modal confirmado")
                        time.sleep(2)
                        break
                except NoSuchElementException:
                    continue
            
            time.sleep(3)
            return True
            
        except NoSuchElementException:
            print("   ‚ùå Elemento AI toggle no encontrado con XPath")
            
        # Fallback por texto
        print("üîç Fallback: Buscando por texto 'AI-generated content'")
        
        try:
            ai_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'AI-generated content')]")
            if ai_elements:
                print(f"   üìç Encontrados {len(ai_elements)} elementos con texto AI")
                
                for element in ai_elements:
                    try:
                        # Buscar toggle padre
                        parent = element.find_element(By.XPATH, "./ancestor::*[4]")
                        toggles = parent.find_elements(By.XPATH, ".//*[@role='switch' or contains(@class, 'Switch')]")
                        
                        for i, toggle in enumerate(toggles, 1):
                            is_checked = toggle.get_attribute('aria-checked')
                            
                            if is_checked == 'false':
                                print(f"     üéØ Activando toggle #{i}...")
                                driver.execute_script("arguments[0].scrollIntoView();", toggle)
                                time.sleep(1)
                                driver.execute_script("arguments[0].click();", toggle)
                                time.sleep(2)
                                print(f"‚úÖ AI Content activado - Toggle #{i} (fallback)")
                                return True
                    except:
                        continue
        except:
            pass
        
        print("‚ùå No se pudo activar AI Content")
        return False
        
    except Exception as e:
        print(f"‚ùå Error en activaci√≥n AI Content: {e}")
        return False

def verificar_everyone_seleccionado(driver):
    """AJUSTE #4: Verificar que Everyone est√© seleccionado"""
    print("\nüîç VERIFICANDO SELECCI√ìN DE 'EVERYONE'...")
    
    try:
        everyone_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'Everyone')]")
        
        if everyone_elements:
            print(f"   üìç Encontrados {len(everyone_elements)} elementos con texto 'Everyone'")
            
            for i, element in enumerate(everyone_elements):
                try:
                    is_selected = driver.execute_script("""
                        var el = arguments[0];
                        var parent = el.closest('[role="radio"], [aria-selected], .selected, .active');
                        if (parent) {
                            return parent.getAttribute('aria-selected') === 'true' ||
                                   parent.classList.contains('selected') ||
                                   parent.classList.contains('active') ||
                                   parent.getAttribute('aria-checked') === 'true';
                        }
                        return false;
                    """, element)
                    
                    print(f"     üìª Everyone #{i+1} - Seleccionado: {is_selected}")
                    
                    if not is_selected:
                        print(f"     üéØ Seleccionando Everyone #{i+1}...")
                        driver.execute_script("arguments[0].scrollIntoView();", element)
                        time.sleep(0.5)
                        driver.execute_script("arguments[0].click();", element)
                        time.sleep(1)
                        print(f"‚úÖ Everyone seleccionado - Elemento #{i+1}")
                        return True
                    else:
                        print("‚úÖ Everyone ya est√° seleccionado")
                        return True
                except:
                    continue
        
        print("‚ö†Ô∏è No se pudo verificar/seleccionar Everyone")
        return False
        
    except Exception as e:
        print(f"‚ùå Error verificando Everyone: {e}")
        return False

def subir_video_ultra_stealth_selenium_estable(video_path, descripcion):
    """Funci√≥n principal Selenium estable con m√°xima anti-detecci√≥n"""
    print("üéØ UPLOADER TIKTOK ULTRA STEALTH V5 - SELENIUM ESTABLE")
    print("=" * 60)
    print("üìã AJUSTES APLICADOS:")
    print("1. Pantalla 1920x1080 (sin cortes)")
    print("2. Procesamiento 20 segundos") 
    print("3. XPath espec√≠fico para AI content")
    print("4. Verificar Everyone seleccionado")
    print("5. Esperar 30 segundos antes de Post")
    print("6. üî• SELENIUM ESTABLE con anti-detecci√≥n manual")
    print("=" * 60)
    
    cookies_path = "config/upload_cookies_playwright.json"
    
    # Verificar archivo
    if not os.path.exists(video_path):
        print(f"‚ùå Archivo no encontrado: {video_path}")
        return False
    
    file_size = os.path.getsize(video_path) / (1024*1024)
    print(f"üìπ Video: {video_path}")
    print(f"üìè Tama√±o: {file_size:.1f} MB")
    
    # Configurar Chrome
    options = setup_stealth_chrome()
    
    try:
        # Crear driver
        service = Service()
        driver = webdriver.Chrome(service=service, options=options)
        
        # Aplicar scripts anti-detecci√≥n
        apply_stealth_scripts(driver)
        
        # Configurar ventana
        driver.set_window_size(1920, 1080)
        driver.maximize_window()
        
        print("‚úÖ Chrome configurado con anti-detecci√≥n extrema")
        
        # Cargar cookies
        cookie_loaded = cargar_cookies(driver, cookies_path)
        
        print("\nüåê Navegando directamente a Creator Center...")
        driver.get('https://www.tiktok.com/creator-center/upload')
        time.sleep(5)
        
        # Aplicar scripts anti-detecci√≥n nuevamente despu√©s de cargar la p√°gina
        apply_stealth_scripts(driver)
        
        # Verificar autenticaci√≥n
        print("   üîç Verificando estado de autenticaci√≥n...")
        needs_login = False
        
        try:
            # Buscar indicadores de login
            login_elements = driver.find_elements(By.XPATH, "//button[contains(text(), 'Log in')] | //button[contains(text(), 'Sign up')]")
            if any(el.is_displayed() for el in login_elements):
                needs_login = True
        except:
            pass
        
        if needs_login:
            print("‚ö†Ô∏è SE REQUIERE LOGIN MANUAL:")
            print("   üë§ 1. Logueate en TikTok en el navegador que se abri√≥")
            print("   üéØ 2. Navega manualmente a: https://www.tiktok.com/creator-center/upload")
            print("   ‚úÖ 3. Aseg√∫rate de ver la p√°gina de upload")
            print("   ‚è≥ 4. Presiona Enter aqu√≠ cuando est√©s listo...")
            input()
            
            driver.get('https://www.tiktok.com/creator-center/upload')
            time.sleep(3)
            apply_stealth_scripts(driver)
        else:
            print("‚úÖ Ya autenticado - Continuando autom√°ticamente")
        
        movimiento_humano_realista(driver)
        
        # Verificar p√°gina de upload
        print("\nüîç Esperando carga de p√°gina de upload...")
        
        page_loaded = False
        for attempt in range(3):
            try:
                WebDriverWait(driver, 15).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'input[type="file"]'))
                )
                print("‚úÖ P√°gina de upload cargada")
                page_loaded = True
                break
            except TimeoutException:
                if attempt < 2:
                    print(f"‚ö†Ô∏è Intento {attempt + 1} fall√≥, reintentando...")
                    driver.refresh()
                    time.sleep(5)
                    apply_stealth_scripts(driver)
        
        if not page_loaded:
            print("‚ùå Error: P√°gina de upload no carg√≥")
            return False
        
        # Upload de archivo
        print("\nüìÅ Cargando archivo...")
        file_inputs = driver.find_elements(By.CSS_SELECTOR, 'input[type="file"]')
        print(f"üìÅ Encontrados {len(file_inputs)} inputs de archivo")
        
        if not file_inputs:
            print("‚ùå No se encontraron inputs de archivo")
            return False
        
        upload_success = False
        for i, file_input in enumerate(file_inputs, 1):
            try:
                print(f"üéØ Intentando input #{i}...")
                
                # Hacer visible el input
                driver.execute_script("""
                    arguments[0].style.display = 'block';
                    arguments[0].style.visibility = 'visible';
                    arguments[0].style.opacity = '1';
                """, file_input)
                
                file_input.send_keys(os.path.abspath(video_path))
                time.sleep(random.uniform(2, 4))
                print(f"‚úÖ ARCHIVO CARGADO con input #{i}")
                upload_success = True
                break
            except Exception as e:
                print(f"‚ùå Input #{i} fall√≥: {str(e)[:100]}")
        
        if not upload_success:
            return False
        
        # AJUSTE #2: Procesamiento (20 segundos)
        print("\n‚è≥ PROCESAMIENTO OPTIMIZADO (20 segundos)...")
        for i in range(4):
            print(f"‚è≥ Procesando... {i*5}/20s")
            if random.random() < 0.6:
                movimiento_humano_realista(driver)
            time.sleep(5)
        
        # Screenshot
        timestamp = int(time.time())
        driver.save_screenshot(f"selenium_estable_processing_{timestamp}.png")
        print(f"üì∏ Screenshot: selenium_estable_processing_{timestamp}.png")
        
        # Show More
        print("\nüîç Buscando opciones avanzadas...")
        show_more_clicked = False
        
        # XPATH ESPEC√çFICO proporcionado por el usuario para Show More
        xpath_show_more = '//*[@id="root"]/div/div/div[2]/div[2]/div/div/div/div[4]/div[1]/div[4]/div[3]/div/span[1]'
        
        try:
            print(f"üîç Usando XPath espec√≠fico para Show More: {xpath_show_more}")
            
            # Scroll para asegurar visibilidad
            print("   üìú Haciendo scroll para asegurar visibilidad...")
            driver.execute_script("window.scrollBy(0, 300)")
            time.sleep(2)
            
            # Buscar elemento Show More por XPath espec√≠fico
            show_more = driver.find_element(By.XPATH, xpath_show_more)
            
            if show_more.is_displayed():
                print("   üìç Elemento Show More encontrado con XPath espec√≠fico")
                
                # Obtener informaci√≥n del elemento
                tag_name = show_more.tag_name
                class_name = show_more.get_attribute('class')
                text_content = show_more.text
                
                print(f"   üìã Tag: {tag_name}")
                print(f"   üìã Clases: {class_name}")
                print(f"   üìã Texto: '{text_content}'")
                
                # Scroll al elemento y click
                driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", show_more)
                time.sleep(2)
                
                # Hover y click
                print("   üñ±Ô∏è Haciendo hover sobre Show More...")
                actions = ActionChains(driver)
                actions.move_to_element(show_more).perform()
                time.sleep(1)
                
                print("   üñ±Ô∏è Haciendo click en Show More...")
                driver.execute_script("arguments[0].click();", show_more)
                time.sleep(3)
                
                print("‚úÖ Show More clickeado con XPath espec√≠fico - Secci√≥n expandida")
                show_more_clicked = True
            else:
                print("   ‚ùå Elemento Show More no visible con XPath espec√≠fico")
                
        except NoSuchElementException:
            print("   ‚ùå Elemento Show More no encontrado con XPath espec√≠fico")
        except Exception as e:
            print(f"   ‚ùå Error con XPath espec√≠fico de Show More: {e}")
        
        # Fallback: Buscar por texto si el XPath falla
        if not show_more_clicked:
            print("üîç Fallback: Buscando Show More por texto...")
            
            show_more_selectors = [
                "//button[contains(text(), 'Show More')] | //button[contains(text(), 'Show more')] | //button[contains(text(), 'Mostrar m√°s')]"
            ]
            
            for selector in show_more_selectors:
                try:
                    show_more = driver.find_element(By.XPATH, selector)
                    if show_more.is_displayed():
                        print(f"   üìç Show More encontrado con fallback")
                        driver.execute_script("arguments[0].scrollIntoView();", show_more)
                        time.sleep(1)
                        driver.execute_script("arguments[0].click();", show_more)
                        time.sleep(3)
                        print("‚úÖ Show More clickeado (fallback)")
                        show_more_clicked = True
                        break
                except NoSuchElementException:
                    continue
        
        if not show_more_clicked:
            print("‚ö†Ô∏è Show More no encontrado, haciendo scroll...")
            driver.execute_script("window.scrollBy(0, 500)")
            time.sleep(2)
        
        # AJUSTE #3: Activar AI Content
        ai_activated = activar_ai_content_xpath_especifico(driver)
        
        # AJUSTE #4: Verificar Everyone
        everyone_ok = verificar_everyone_seleccionado(driver)
        
        # Agregar descripci√≥n
        print("\nüìù Agregando descripci√≥n...")
        desc_selectors = [
            "//textarea[contains(@placeholder, 'escrib')] | //textarea[contains(@placeholder, 'Describ')] | //div[@contenteditable='true']"
        ]
        
        descripcion_agregada = False
        for selector in desc_selectors:
            try:
                desc_element = driver.find_element(By.XPATH, selector)
                if desc_element.is_displayed():
                    print(f"   üìç Campo de descripci√≥n encontrado")
                    driver.execute_script("arguments[0].focus();", desc_element)
                    time.sleep(1)
                    desc_element.clear()
                    time.sleep(1)
                    
                    escribir_como_humano(desc_element, descripcion, driver)
                    
                    # Verificar
                    time.sleep(2)
                    texto_actual = desc_element.get_attribute('value') or desc_element.text
                    
                    if texto_actual and len(texto_actual.strip()) > 10:
                        print("‚úÖ Descripci√≥n agregada correctamente")
                        print(f"   üìù Caracteres escritos: {len(texto_actual)}")
                        descripcion_agregada = True
                        break
            except NoSuchElementException:
                continue
        
        # Screenshot pre-publicaci√≥n
        timestamp = int(time.time())
        driver.save_screenshot(f"selenium_estable_pre_publish_{timestamp}.png")
        print(f"üì∏ Screenshot pre-publicaci√≥n: selenium_estable_pre_publish_{timestamp}.png")
        
        # AJUSTE #5: Esperar 30 segundos
        print("\n‚è≥ ESPERANDO 30 SEGUNDOS ANTES DE PUBLICAR...")
        for i in range(6):
            print(f"   ‚è∞ {30 - i*5} segundos restantes...")
            movimiento_humano_realista(driver)
            time.sleep(5)
        
        # Buscar bot√≥n Post
        print("\nüöÄ BUSCANDO BOT√ìN POST...")
        
        # XPath espec√≠fico proporcionado por el usuario para el bot√≥n Post
        xpath_post_button = '//*[@id="root"]/div/div/div[2]/div[2]/div/div/div/div[5]/div/button[1]/div[2]'
        
        publish_success = False
        
        # Intentar primero con XPath espec√≠fico del bot√≥n Post
        try:
            print(f"üéØ Usando XPath espec√≠fico para Post: {xpath_post_button}")
            
            # Scroll para asegurar visibilidad
            driver.execute_script("window.scrollBy(0, 200)")
            time.sleep(2)
            
            publish_button = driver.find_element(By.XPATH, xpath_post_button)
            
            is_visible = publish_button.is_displayed()
            is_enabled = publish_button.is_enabled()
            
            print(f"   üìç Bot√≥n Post encontrado con XPath espec√≠fico - Visible: {is_visible}, Habilitado: {is_enabled}")
            
            if is_visible and is_enabled:
                print("   ü§ñ Simulando comportamiento humano...")
                driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", publish_button)
                time.sleep(random.uniform(2, 4))
                
                # Hover
                actions = ActionChains(driver)
                actions.move_to_element(publish_button).perform()
                time.sleep(random.uniform(1, 3))
                
                # Click
                print("   üñ±Ô∏è Realizando click en bot√≥n Post con XPath espec√≠fico...")
                driver.execute_script("arguments[0].click();", publish_button)
                print("‚úÖ Bot√≥n Post clickeado con XPath espec√≠fico")
                
                # Continuar con el manejo de modales
                publish_success = True
                
        except NoSuchElementException:
            print("   ‚ùå Bot√≥n Post no encontrado con XPath espec√≠fico")
        except Exception as e:
            print(f"   ‚ùå Error con XPath espec√≠fico de Post: {e}")
        
        # Si el XPath espec√≠fico fall√≥, intentar selectores gen√©ricos
        if not publish_success:
            print("\nüîÑ Intentando con selectores gen√©ricos...")
            
            publish_selectors = [
                "//button[contains(text(), 'Post')] | //button[contains(text(), 'Publicar')] | //button[@type='submit']"
            ]
            
            for selector in publish_selectors:
                try:
                publish_button = driver.find_element(By.XPATH, selector)
                
                is_visible = publish_button.is_displayed()
                is_enabled = publish_button.is_enabled()
                text_content = publish_button.text
                
                print(f"   üìç Bot√≥n encontrado: '{text_content}' - Visible: {is_visible}, Habilitado: {is_enabled}")
                
                if is_visible and is_enabled:
                    print("   ü§ñ Simulando comportamiento humano...")
                    driver.execute_script("arguments[0].scrollIntoView();", publish_button)
                    time.sleep(random.uniform(2, 4))
                    
                    # Hover
                    actions = ActionChains(driver)
                    actions.move_to_element(publish_button).perform()
                    time.sleep(random.uniform(1, 3))
                    
                    # Click
                    print("   üñ±Ô∏è Realizando click...")
                    driver.execute_script("arguments[0].click();", publish_button)
                    print("‚úÖ Bot√≥n Post clickeado")
                    
                    # MANEJO MEJORADO DE MODALES
                    print("   üîç Verificando si aparece alg√∫n modal...")
                    time.sleep(5)
                    
                    modal_selectors = [
                        "//div[@role='dialog']",
                        "//*[contains(@class, 'modal')]",
                        "//*[contains(@class, 'Modal')]",
                        "//*[contains(@class, 'popup')]",
                        "//*[contains(@class, 'overlay')]"
                    ]
                    
                    modal_found = False
                    modal_text = ""
                    
                    for modal_selector in modal_selectors:
                        try:
                            modal = driver.find_element(By.XPATH, modal_selector)
                            if modal.is_displayed():
                                modal_text = modal.text
                                print(f"   ‚ö†Ô∏è Modal detectado: {modal_text[:150]}...")
                                modal_found = True
                                break
                        except NoSuchElementException:
                            continue
                    
                    if modal_found:
                        print("   üîç Analizando tipo de modal...")
                        modal_text_lower = modal_text.lower()
                        
                        # Detectar diferentes tipos de modal
                        if any(keyword in modal_text_lower for keyword in ['exit', 'sure', 'discard', 'leave', 'unsaved']):
                            print("   ‚ö†Ô∏è Modal de salida detectado - CANCELANDO para continuar con upload")
                            
                            # Buscar bot√≥n cancelar/no
                            cancel_selectors = [
                                "//button[contains(text(), 'Cancel')]",
                                "//button[contains(text(), 'Cancelar')]",
                                "//button[contains(text(), 'No')]",
                                "//button[contains(text(), 'Stay')]",
                                "//button[contains(@class, 'cancel')]",
                                "//button[contains(@class, 'secondary')]"
                            ]
                            
                            cancel_clicked = False
                            for cancel_selector in cancel_selectors:
                                try:
                                    cancel_btn = driver.find_element(By.XPATH, cancel_selector)
                                    if cancel_btn.is_displayed():
                                        driver.execute_script("arguments[0].click();", cancel_btn)
                                        print(f"   ‚úÖ Modal de salida cancelado")
                                        time.sleep(2)
                                        cancel_clicked = True
                                        break
                                except NoSuchElementException:
                                    continue
                            
                            if cancel_clicked:
                                print("   üîÑ Continuando con el proceso de upload...")
                                # Reintentar click en Post
                                time.sleep(3)
                                try:
                                    post_button_retry = driver.find_element(By.XPATH, "//button[contains(text(), 'Post')]")
                                    if post_button_retry.is_displayed() and post_button_retry.is_enabled():
                                        print("   üîÑ Reintentando click en Post...")
                                        driver.execute_script("arguments[0].click();", post_button_retry)
                                        time.sleep(5)
                                        print("‚úÖ Video publicado despu√©s de cancelar modal de salida")
                                        publish_success = True
                                        break
                                    else:
                                        print("   ‚ö†Ô∏è Bot√≥n Post no disponible despu√©s de cancelar modal")
                                except NoSuchElementException:
                                    print("   ‚ö†Ô∏è No se encontr√≥ bot√≥n Post para reintentar")
                            else:
                                print("   ‚ùå No se pudo cancelar el modal de salida")
                                
                        elif any(keyword in modal_text_lower for keyword in ['success', 'published', 'uploaded', 'posted', 'publicado']):
                            print("   ‚úÖ Modal de √©xito detectado - ¬°Video publicado exitosamente!")
                            publish_success = True
                            break
                            
                        elif any(keyword in modal_text_lower for keyword in ['error', 'failed', 'problema', 'fallo']):
                            print("   ‚ùå Modal de error detectado - Upload fall√≥")
                            print(f"   üìù Error: {modal_text[:200]}")
                            # Cerrar modal de error y salir
                            try:
                                close_selectors = [
                                    "//button[contains(text(), 'Close')]",
                                    "//button[contains(text(), 'Cerrar')]",
                                    "//button[contains(@aria-label, 'close')]",
                                    "//button[contains(@class, 'close')]"
                                ]
                                for close_selector in close_selectors:
                                    try:
                                        close_btn = driver.find_element(By.XPATH, close_selector)
                                        if close_btn.is_displayed():
                                            driver.execute_script("arguments[0].click();", close_btn)
                                            time.sleep(1)
                                            break
                                    except NoSuchElementException:
                                        continue
                            except:
                                pass
                            return False
                            
                        else:
                            print("   ‚ùì Modal desconocido - Intentando cerrarlo...")
                            # Intentar cerrar modal gen√©rico
                            close_selectors = [
                                "//button[contains(text(), 'OK')]",
                                "//button[contains(text(), 'Aceptar')]",
                                "//button[contains(text(), 'Close')]",
                                "//button[contains(text(), 'Cerrar')]",
                                "//button[contains(@aria-label, 'close')]",
                                "//button[contains(@class, 'close')]"
                            ]
                            
                            for close_selector in close_selectors:
                                try:
                                    close_btn = driver.find_element(By.XPATH, close_selector)
                                    if close_btn.is_displayed():
                                        driver.execute_script("arguments[0].click();", close_btn)
                                        print(f"   ‚úÖ Modal cerrado")
                                        time.sleep(2)
                                        break
                                except NoSuchElementException:
                                    continue
                                    
                    else:
                        # No hay modal - verificar si el upload fue exitoso por otros medios
                        print("   ‚ÑπÔ∏è No se detect√≥ modal")
                        
                        # Verificar cambio de URL o elementos de √©xito
                        time.sleep(3)
                        current_url = driver.current_url
                        
                        if 'upload' not in current_url or 'success' in current_url or 'posted' in current_url:
                            print("   ‚úÖ URL cambi√≥ - Video posiblemente publicado exitosamente")
                            publish_success = True
                            break
                        else:
                            # Buscar indicadores de √©xito en la p√°gina
                            success_indicators = [
                                "//text()[contains(., 'Video posted')]",
                                "//text()[contains(., 'Published')]",
                                "//text()[contains(., 'Publicado')]",
                                "//text()[contains(., 'Success')]",
                                "//*[contains(@class, 'success')]",
                                "//*[contains(@class, 'posted')]"
                            ]
                            
                            for indicator in success_indicators:
                                try:
                                    success_element = driver.find_element(By.XPATH, indicator)
                                    if success_element.is_displayed():
                                        print(f"   ‚úÖ Indicador de √©xito encontrado")
                                        publish_success = True
                                        break
                                except NoSuchElementException:
                                    continue
                            
                            if publish_success:
                                break
                            else:
                                print("   ‚úÖ Click realizado - Asumiendo √©xito (sin modal ni indicadores)")
                                publish_success = True
                                break
                    
                    break
                    
            except NoSuchElementException:
                continue
        
        if publish_success:
            print("‚úÖ Video publicado exitosamente")
            time.sleep(10)
            return True
        else:
            print("‚ùå No se pudo encontrar el bot√≥n Post")
            driver.save_screenshot(f"selenium_estable_no_post_button_{int(time.time())}.png")
            return False
        
    except Exception as e:
        print(f"‚ùå Error en proceso principal: {e}")
        return False
    
    finally:
        try:
            time.sleep(3)
            driver.quit()
        except:
            pass

def main():
    """Funci√≥n principal"""
    video_path = "data/videos/final/videos_unidos_FUNDIDO_TIKTOK.mp4"
    descripcion = """üî• ¬°Contenido √âPICO que te va a SORPRENDER! ‚ú® 

No puedes perderte esta incre√≠ble experiencia viral que est√° rompiendo TikTok üöÄ
¬°Dale LIKE si te gust√≥ y COMPARTE con tus amigos! üíñ

Prep√°rate para algo que jam√°s has visto antes... ¬øEst√°s listo? üëÄ

#fyp #viral #trending #amazing #foryou"""
    
    resultado = subir_video_ultra_stealth_selenium_estable(video_path, descripcion)
    
    if resultado:
        print("\nüéâ ¬°UPLOAD COMPLETADO EXITOSAMENTE!")
    else:
        print("\n‚ùå Upload fall√≥")

if __name__ == "__main__":
    main()
