#!/usr/bin/env python3
"""
üéØ UPLOADER TIKTOK ULTRA STEALTH V5 - SELENIUM EDITION
Versi√≥n V5 usando Selenium en lugar de Playwright para evitar detecci√≥n
Mantiene toda la l√≥gica del V4 modificado pero con Selenium
"""

import asyncio
import json
import os
import random
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import undetected_chromedriver as uc

def cargar_cookies(driver, cookies_path):
    """Cargar cookies de sesi√≥n - Selenium version"""
    try:
        with open(cookies_path, 'r') as f:
            cookies = json.load(f)
        
        # Ir a TikTok primero para cargar cookies
        driver.get("https://www.tiktok.com")
        time.sleep(3)
        
        for cookie in cookies:
            try:
                # Convertir formato Playwright a Selenium
                selenium_cookie = {
                    'name': cookie['name'],
                    'value': cookie['value'],
                    'domain': cookie.get('domain', '.tiktok.com'),
                    'path': cookie.get('path', '/'),
                }
                
                # Agregar campos opcionales si existen
                if 'secure' in cookie:
                    selenium_cookie['secure'] = cookie['secure']
                if 'httpOnly' in cookie:
                    selenium_cookie['httpOnly'] = cookie['httpOnly']
                
                driver.add_cookie(selenium_cookie)
            except Exception as e:
                print(f"   ‚ö†Ô∏è Error con cookie {cookie.get('name', 'unknown')}: {e}")
                continue
        
        print(f"‚úÖ Cookies cargadas desde {cookies_path}")
        return True
    except Exception as e:
        print(f"‚ùå Error cargando cookies: {e}")
        return False

def movimiento_humano_realista(driver):
    """Simula movimientos de mouse completamente humanos - Selenium version"""
    try:
        actions = ActionChains(driver)
        
        # Mover a posici√≥n aleatoria
        viewport_width = driver.execute_script("return window.innerWidth")
        viewport_height = driver.execute_script("return window.innerHeight")
        
        x = random.randint(200, min(1200, viewport_width - 100))
        y = random.randint(200, min(800, viewport_height - 100))
        
        # Movimiento suave
        actions.move_by_offset(x - viewport_width//2, y - viewport_height//2)
        actions.perform()
        
        time.sleep(random.uniform(0.5, 2.0))
        
        # Scroll ocasional
        if random.random() < 0.3:
            driver.execute_script(f"window.scrollBy(0, {random.randint(-100, 100)})")
            time.sleep(random.uniform(0.3, 1.0))
            
    except Exception as e:
        print(f"   ‚ö†Ô∏è Error en movimiento humano: {e}")

def escribir_como_humano(element, texto, driver):
    """Escribe texto como un humano real - Selenium version"""
    try:
        # Click en el elemento
        driver.execute_script("arguments[0].click();", element)
        time.sleep(random.uniform(0.2, 0.8))
        
        # Limpiar campo
        element.clear()
        time.sleep(random.uniform(0.1, 0.3))
        
        # Escribir caracter por caracter
        for i, char in enumerate(texto):
            element.send_keys(char)
            
            if char == ' ':
                time.sleep(random.uniform(0.1, 0.3))
            elif char in '.,!?':
                time.sleep(random.uniform(0.2, 0.5))
            elif i > 0 and i % random.randint(8, 15) == 0:
                time.sleep(random.uniform(0.1, 0.4))
            else:
                time.sleep(random.uniform(0.05, 0.15))
                
    except Exception as e:
        print(f"   ‚ùå Error escribiendo texto: {e}")

def activar_ai_content_xpath_especifico(driver):
    """AJUSTE #3: Activaci√≥n con XPath espec√≠fico del usuario - Selenium version"""
    print("\nüéØ ACTIVACI√ìN AI CONTENT CON XPATH ESPEC√çFICO...")
    
    # XPath espec√≠fico proporcionado por el usuario
    xpath_ai_toggle = '//*[@id="root"]/div/div/div[2]/div[2]/div/div/div/div[4]/div[1]/div[4]/div[1]/div[3]/div[3]/div/div/div/div/span'
    
    try:
        print(f"üîç Usando XPath espec√≠fico: {xpath_ai_toggle}")
        
        # Scroll adicional para asegurar visibilidad
        print("   üìú Haciendo scroll para asegurar visibilidad...")
        driver.execute_script("window.scrollBy(0, 300)")
        time.sleep(2)
        
        # Buscar elemento por XPath
        try:
            ai_toggle = driver.find_element(By.XPATH, xpath_ai_toggle)
            print("   üìç Elemento AI toggle encontrado con XPath")
            
            # Obtener informaci√≥n del elemento
            tag_name = ai_toggle.tag_name
            class_name = ai_toggle.get_attribute('class')
            
            print(f"   üìã Tag: {tag_name}")
            print(f"   üìã Clases: {class_name}")
            
            # Verificar si el elemento es visible
            is_visible = ai_toggle.is_displayed()
            print(f"   üëÅÔ∏è Elemento visible: {is_visible}")
            
            if not is_visible:
                print("   üìú Elemento no visible, haciendo scroll directo al elemento...")
                driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", ai_toggle)
                time.sleep(3)
            
            # Hover sobre el elemento primero
            print("   üñ±Ô∏è Haciendo hover sobre el elemento...")
            actions = ActionChains(driver)
            actions.move_to_element(ai_toggle).perform()
            time.sleep(1)
            
            # Click en el elemento
            print("   üñ±Ô∏è Haciendo click en el toggle...")
            driver.execute_script("arguments[0].click();", ai_toggle)
            
            print("‚úÖ AI Content toggle clickeado con XPath espec√≠fico")
            
            # Buscar y manejar modal de confirmaci√≥n
            print("   üîç Buscando modal de confirmaci√≥n...")
            time.sleep(2)
            
            modal_selectors = [
                "//button[contains(text(), 'Turn on')]",
                "//button[contains(text(), 'Aceptar')]",
                "//button[contains(text(), 'Accept')]",
                "//button[contains(text(), 'Confirmar')]",
                "//*[contains(@data-testid, 'confirm')]",
                "//*[contains(@class, 'confirm')]",
                "//div[@role='dialog']//button",
                "//*[contains(@class, 'modal')]//button"
            ]
            
            modal_handled = False
            for selector in modal_selectors:
                try:
                    modal_button = driver.find_element(By.XPATH, selector)
                    if modal_button.is_displayed():
                        button_text = modal_button.text
                        print(f"   üìç Modal encontrado - Bot√≥n: '{button_text}' con selector: {selector}")
                        
                        driver.execute_script("arguments[0].click();", modal_button)
                        print(f"   ‚úÖ Modal confirmado - Bot√≥n '{button_text}' clickeado")
                        modal_handled = True
                        time.sleep(2)
                        break
                except NoSuchElementException:
                    continue
                except Exception as e:
                    continue
            
            if not modal_handled:
                print("   ‚ÑπÔ∏è No se encontr√≥ modal de confirmaci√≥n (puede que no haya aparecido)")
            
            # Esperar despu√©s del modal
            time.sleep(3)
            
            # Verificar si el estado cambi√≥
            new_class = ai_toggle.get_attribute('class')
            print(f"   üîÑ Clases despu√©s del click: {new_class}")
            
            if 'checked-true' in str(new_class) or 'Switch__thumb--checked-true' in str(new_class):
                print("‚úÖ AI Content activado exitosamente!")
                return True
            elif modal_handled:
                print("‚úÖ AI Content activado (modal confirmado)")
                return True
            else:
                print("‚ö†Ô∏è Click realizado pero estado no cambi√≥ visiblemente")
                return True  # Asumimos que funcion√≥
                
        except NoSuchElementException:
            print("   ‚ùå Elemento AI toggle no encontrado con XPath")
            
        # Fallback: Buscar por texto
        print("üîç Fallback: Buscando por texto 'AI-generated content'")
        
        driver.execute_script("window.scrollBy(0, 200)")
        time.sleep(1)
        
        try:
            ai_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'AI-generated content')]")
            if ai_elements:
                print(f"   üìç Encontrados {len(ai_elements)} elementos con texto AI")
                
                for element in ai_elements:
                    try:
                        # Buscar toggles cercanos
                        toggles = driver.find_elements(By.XPATH, ".//ancestor::*[4]//*[@role='switch' or contains(@class, 'Switch')]")
                        print(f"   üéõÔ∏è Encontrados {len(toggles)} toggles en contenedor")
                        
                        for i, toggle in enumerate(toggles, 1):
                            try:
                                is_checked = toggle.get_attribute('aria-checked')
                                state = toggle.get_attribute('data-state')
                                class_attr = toggle.get_attribute('class')
                                
                                print(f"     üîò Toggle #{i} - Checked: {is_checked}, State: {state}")
                                
                                # Verificar si est√° desactivado
                                is_unchecked = (
                                    is_checked == 'false' or 
                                    state == 'unchecked' or 
                                    'checked-false' in str(class_attr)
                                )
                                
                                if is_unchecked:
                                    print(f"     üéØ Activando toggle #{i}...")
                                    driver.execute_script("arguments[0].scrollIntoView();", toggle)
                                    time.sleep(1)
                                    driver.execute_script("arguments[0].click();", toggle)
                                    time.sleep(2)
                                    print(f"‚úÖ AI Content activado - Toggle #{i} (fallback)")
                                    return True
                            except Exception as e:
                                print(f"     ‚ùå Error con toggle #{i}: {str(e)[:50]}")
                                continue
                    except Exception as e:
                        print(f"   ‚ùå Error procesando elemento AI: {str(e)[:50]}")
                        continue
        except:
            pass
        
        print("‚ùå No se pudo activar AI Content")
        return False
        
    except Exception as e:
        print(f"‚ùå Error en activaci√≥n AI Content: {e}")
        return False

def verificar_everyone_seleccionado(driver):
    """AJUSTE #4: Verificar que Everyone est√© seleccionado - Selenium version"""
    print("\nüîç VERIFICANDO SELECCI√ìN DE 'EVERYONE'...")
    
    try:
        # Buscar elementos con texto "Everyone"
        everyone_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'Everyone')]")
        
        if everyone_elements:
            print(f"   üìç Encontrados {len(everyone_elements)} elementos con texto 'Everyone'")
            
            for i, element in enumerate(everyone_elements):
                try:
                    # Verificar si est√° seleccionado
                    is_selected = driver.execute_script("""
                        var el = arguments[0];
                        var parent = el.closest('[role="radio"], [aria-selected], .selected, .active');
                        if (parent) {
                            return parent.getAttribute('aria-selected') === 'true' ||
                                   parent.classList.contains('selected') ||
                                   parent.classList.contains('active') ||
                                   parent.getAttribute('aria-checked') === 'true';
                        }
                        return false;
                    """, element)
                    
                    print(f"     üìª Everyone #{i+1} - Seleccionado: {is_selected}")
                    
                    if not is_selected:
                        print(f"     üéØ Seleccionando Everyone #{i+1}...")
                        driver.execute_script("arguments[0].scrollIntoView();", element)
                        time.sleep(0.5)
                        driver.execute_script("arguments[0].click();", element)
                        time.sleep(1)
                        print(f"‚úÖ Everyone seleccionado - Elemento #{i+1}")
                        return True
                    else:
                        print("‚úÖ Everyone ya est√° seleccionado")
                        return True
                        
                except Exception as e:
                    print(f"     ‚ùå Error con Everyone #{i+1}: {str(e)[:50]}")
                    continue
        
        # Buscar por selectores m√°s espec√≠ficos
        privacy_selectors = [
            "//*[contains(@data-testid, 'everyone')]",
            "//*[contains(@aria-label, 'Everyone')]",
            "//input[@value='everyone']",
            "//button[contains(text(), 'Everyone')]"
        ]
        
        for selector in privacy_selectors:
            try:
                elements = driver.find_elements(By.XPATH, selector)
                if elements:
                    print(f"   üìç Encontrados {len(elements)} elementos con selector {selector}")
                    
                    for element in elements:
                        try:
                            driver.execute_script("arguments[0].scrollIntoView();", element)
                            time.sleep(0.5)
                            driver.execute_script("arguments[0].click();", element)
                            time.sleep(1)
                            print(f"‚úÖ Everyone seleccionado con selector {selector}")
                            return True
                        except:
                            continue
            except:
                continue
        
        print("‚ö†Ô∏è No se pudo verificar/seleccionar Everyone")
        return False
        
    except Exception as e:
        print(f"‚ùå Error verificando Everyone: {e}")
        return False

def subir_video_ultra_stealth_selenium(video_path, descripcion):
    """Funci√≥n principal Selenium con todos los ajustes del V4 modificado"""
    print("üéØ UPLOADER TIKTOK ULTRA STEALTH V5 - SELENIUM EDITION")
    print("=" * 60)
    print("üìã AJUSTES APLICADOS:")
    print("1. Pantalla 1920x1080 (sin cortes)")
    print("2. Procesamiento 20 segundos") 
    print("3. XPath espec√≠fico para AI content")
    print("4. Verificar Everyone seleccionado")
    print("5. Esperar 30 segundos antes de Post")
    print("6. üî• USANDO SELENIUM con undetected-chromedriver")
    print("=" * 60)
    
    cookies_path = "config/upload_cookies_playwright.json"
    
    # Verificar archivo
    if not os.path.exists(video_path):
        print(f"‚ùå Archivo no encontrado: {video_path}")
        return False
    
    file_size = os.path.getsize(video_path) / (1024*1024)
    print(f"üìπ Video: {video_path}")
    print(f"üìè Tama√±o: {file_size:.1f} MB")
    
    # Configurar Chrome con m√°xima evasi√≥n
    print("\nüõ°Ô∏è Configurando Chrome con anti-detecci√≥n extrema...")
    
    # Usar undetected-chromedriver para m√°xima evasi√≥n
    options = uc.ChromeOptions()
    
    # Configuraci√≥n anti-detecci√≥n
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-blink-features=AutomationControlled')
    options.add_argument('--disable-extensions')
    options.add_argument('--no-first-run')
    options.add_argument('--disable-default-apps')
    options.add_argument('--disable-infobars')
    options.add_argument('--start-maximized')
    options.add_argument('--window-size=1920,1080')
    options.add_argument('--disable-web-security')
    options.add_argument('--disable-features=VizDisplayCompositor')
    options.add_argument('--disable-background-timer-throttling')
    options.add_argument('--disable-backgrounding-occluded-windows')
    options.add_argument('--disable-renderer-backgrounding')
    
    # User agent real
    options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
    
    # Configuraci√≥n de perfil persistente
    profile_dir = os.path.join(os.getcwd(), "chrome_profile_selenium")
    if not os.path.exists(profile_dir):
        os.makedirs(profile_dir)
        print(f"üìÅ Creado directorio de perfil: {profile_dir}")
    else:
        print(f"üìÅ Usando perfil existente: {profile_dir}")
    
    options.add_argument(f'--user-data-dir={profile_dir}')
    
    # Configuraci√≥n adicional para evitar detecci√≥n
    prefs = {
        "profile.default_content_setting_values": {
            "notifications": 2,
            "geolocation": 1
        },
        "profile.managed_default_content_settings": {
            "images": 1
        }
    }
    options.add_experimental_option("prefs", prefs)
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    
    try:
        # Crear driver con undetected-chromedriver
        driver = uc.Chrome(options=options, version_main=None)
        
        # Configuraci√≥n adicional anti-detecci√≥n
        driver.execute_cdp_cmd('Page.addScriptToEvaluateOnNewDocument', {
            'source': '''
                Object.defineProperty(navigator, 'webdriver', {
                    get: () => undefined,
                });
                
                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5],
                });
                
                Object.defineProperty(navigator, 'languages', {
                    get: () => ['es-MX', 'es', 'en'],
                });
                
                window.chrome = {
                    runtime: {},
                };
                
                Object.defineProperty(navigator, 'permissions', {
                    get: () => ({
                        query: () => Promise.resolve({ state: 'granted' }),
                    }),
                });
            '''
        })
        
        # Configurar ventana
        driver.set_window_size(1920, 1080)
        
        print("‚úÖ Chrome configurado con anti-detecci√≥n extrema")
        
        # Cargar cookies
        cookie_loaded = cargar_cookies(driver, cookies_path)
        
        print("\nüåê Navegando directamente a Creator Center...")
        driver.get('https://www.tiktok.com/creator-center/upload')
        time.sleep(5)
        
        # Verificar si necesita login
        print("   üîç Verificando estado de autenticaci√≥n...")
        login_indicators = [
            "//button[contains(text(), 'Log in')]",
            "//button[contains(text(), 'Sign up')]",
            "//*[contains(@data-testid, 'login')]",
            "//*[contains(@class, 'login')]"
        ]
        
        needs_login = False
        for indicator in login_indicators:
            try:
                element = driver.find_element(By.XPATH, indicator)
                if element.is_displayed():
                    needs_login = True
                    print(f"   üîç Detectado indicador de login: {indicator}")
                    break
            except NoSuchElementException:
                continue
        
        if needs_login:
            print("‚ö†Ô∏è SE REQUIERE LOGIN MANUAL:")
            print("   üë§ 1. Logueate en TikTok en el navegador que se abri√≥")
            print("   üéØ 2. Navega manualmente a: https://www.tiktok.com/creator-center/upload")
            print("   ‚úÖ 3. Aseg√∫rate de ver la p√°gina de upload con √°rea de arrastrar archivos")
            print("   ‚è≥ 4. Presiona Enter aqu√≠ cuando est√©s listo para continuar...")
            input()
            
            # Recargar p√°gina despu√©s del login manual
            print("   üîÑ Recargando p√°gina de upload...")
            driver.get('https://www.tiktok.com/creator-center/upload')
            time.sleep(3)
        else:
            print("‚úÖ Ya autenticado - Continuando autom√°ticamente")
        
        movimiento_humano_realista(driver)
        
        # Verificar carga de p√°gina
        print("\nüîç Esperando carga de p√°gina de upload...")
        
        page_loaded = False
        max_attempts = 3
        
        for attempt in range(max_attempts):
            try:
                # Buscar input de archivo
                WebDriverWait(driver, 15).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'input[type="file"]'))
                )
                print("‚úÖ P√°gina de upload cargada (input detectado)")
                page_loaded = True
                break
            except TimeoutException:
                if attempt < max_attempts - 1:
                    print(f"‚ö†Ô∏è Intento {attempt + 1} fall√≥, reintentando...")
                    driver.refresh()
                    time.sleep(5)
                else:
                    print("‚ö†Ô∏è Input de archivo no detectado, buscando alternativas...")
        
        if not page_loaded:
            # Buscar elementos relacionados con upload
            upload_indicators = [
                "//*[contains(@data-testid, 'upload')]",
                "//*[contains(@class, 'upload')]",
                "//*[contains(text(), 'Select file')]",
                "//*[contains(text(), 'Choose file')]",
                "//*[contains(text(), 'Seleccionar archivo')]"
            ]
            
            for indicator in upload_indicators:
                try:
                    elements = driver.find_elements(By.XPATH, indicator)
                    if elements:
                        print(f"‚úÖ P√°gina de upload cargada ({indicator} detectado)")
                        page_loaded = True
                        break
                except:
                    continue
        
        if not page_loaded:
            print("‚ö†Ô∏è P√°gina no detectada, esperando 5s adicionales...")
            time.sleep(5)
            
            # Screenshot para debug
            debug_timestamp = int(time.time())
            driver.save_screenshot(f"debug_upload_page_selenium_{debug_timestamp}.png")
            print(f"üì∏ Screenshot debug: debug_upload_page_selenium_{debug_timestamp}.png")
            
            # Buscar cualquier input de archivo
            all_inputs = driver.find_elements(By.TAG_NAME, 'input')
            file_inputs = [inp for inp in all_inputs if inp.get_attribute('type') == 'file']
            
            if file_inputs:
                print(f"‚úÖ Encontrados {len(file_inputs)} inputs de archivo despu√©s de espera")
                page_loaded = True
            else:
                print("‚ùå No se encontraron inputs de archivo")
        
        if not page_loaded:
            print("‚ùå Error: P√°gina de upload no carg√≥ completamente")
            return False
        
        # Upload de archivo
        print("\nüìÅ Cargando archivo como humano...")
        file_inputs = driver.find_elements(By.CSS_SELECTOR, 'input[type="file"]')
        print(f"üìÅ Encontrados {len(file_inputs)} inputs de archivo")
        
        if not file_inputs:
            print("‚ùå No se encontraron inputs de archivo")
            return False
        
        upload_success = False
        for i, file_input in enumerate(file_inputs, 1):
            try:
                print(f"üéØ Intentando input #{i}...")
                
                # Hacer visible el input si est√° oculto
                driver.execute_script("arguments[0].style.display = 'block';", file_input)
                driver.execute_script("arguments[0].style.visibility = 'visible';", file_input)
                
                file_input.send_keys(os.path.abspath(video_path))
                time.sleep(random.uniform(1, 3))
                print(f"‚úÖ ARCHIVO CARGADO con input #{i}")
                upload_success = True
                break
            except Exception as e:
                print(f"‚ùå Input #{i} fall√≥: {str(e)[:100]}")
                if i == len(file_inputs):
                    print("‚ùå No se pudo cargar el archivo")
        
        if not upload_success:
            return False
        
        # AJUSTE #2: Procesamiento (20 segundos)
        print("\n‚è≥ PROCESAMIENTO OPTIMIZADO (20 segundos)...")
        total_wait = 20
        interval = 5
        
        for elapsed in range(0, total_wait, interval):
            print(f"‚è≥ Procesando... {elapsed}/{total_wait}s")
            if random.random() < 0.6:
                movimiento_humano_realista(driver)
            time.sleep(interval)
        
        # Verificaci√≥n de procesamiento
        print("\nüîç Verificaci√≥n final de procesamiento...")
        indicators = {
            'canvas': len(driver.find_elements(By.TAG_NAME, 'canvas')),
            '[class*="preview"]': len(driver.find_elements(By.CSS_SELECTOR, '[class*="preview"]')),
            '[class*="player"]': len(driver.find_elements(By.CSS_SELECTOR, '[class*="player"]'))
        }
        
        print("‚úÖ Indicadores encontrados:")
        for name, count in indicators.items():
            print(f"   - {name} ({count})")
        
        timestamp = int(time.time())
        driver.save_screenshot(f"selenium_processing_{timestamp}.png")
        print(f"üì∏ Screenshot: selenium_processing_{timestamp}.png")
        
        # Show More - CR√çTICO para hacer visible el AI Content
        print("\nüîç Buscando opciones avanzadas...")
        show_more_clicked = False
        
        show_more_selectors = [
            "//button[contains(text(), 'Show More')]",
            "//button[contains(text(), 'Show more')]",
            "//button[contains(text(), 'Mostrar m√°s')]",
            "//*[contains(@data-testid, 'show-more')]",
            "//*[contains(@class, 'show-more')]",
            "//button[@aria-expanded='false']"
        ]
        
        for selector in show_more_selectors:
            try:
                show_more = driver.find_element(By.XPATH, selector)
                if show_more.is_displayed():
                    print(f"   üìç Show More encontrado con: {selector}")
                    
                    driver.execute_script("arguments[0].scrollIntoView();", show_more)
                    time.sleep(1)
                    driver.execute_script("arguments[0].click();", show_more)
                    time.sleep(3)
                    
                    print("‚úÖ Show More clickeado - Secci√≥n expandida")
                    show_more_clicked = True
                    break
            except NoSuchElementException:
                continue
            except Exception as e:
                print(f"   ‚ùå Error con selector {selector}: {str(e)[:50]}")
                continue
        
        if not show_more_clicked:
            print("‚ö†Ô∏è Show More no encontrado, haciendo scroll manual...")
            driver.execute_script("window.scrollBy(0, 500)")
            time.sleep(2)
        
        # AJUSTE #3: Activar AI Content con XPath espec√≠fico
        ai_activated = activar_ai_content_xpath_especifico(driver)
        
        if ai_activated:
            print("‚úÖ AI Content activado correctamente")
        else:
            print("‚ö†Ô∏è AI Content no se pudo activar")
        
        # AJUSTE #4: Verificar que Everyone est√© seleccionado
        everyone_ok = verificar_everyone_seleccionado(driver)
        
        if everyone_ok:
            print("‚úÖ Everyone verificado/seleccionado")
        else:
            print("‚ö†Ô∏è Everyone no pudo ser verificado")
        
        # Agregar descripci√≥n
        print("\nüìù Agregando descripci√≥n...")
        desc_selectors = [
            "//textarea[contains(@placeholder, 'escrib')]",
            "//textarea[contains(@placeholder, 'Describ')]",
            "//div[@contenteditable='true']",
            "//*[contains(@data-testid, 'caption')]",
            "//textarea[contains(@data-testid, 'caption-input')]",
            "//textarea[contains(@aria-label, 'caption')]"
        ]
        
        descripcion_agregada = False
        for selector in desc_selectors:
            try:
                desc_element = driver.find_element(By.XPATH, selector)
                if desc_element.is_displayed():
                    print(f"   üìç Campo de descripci√≥n encontrado: {selector}")
                    
                    driver.execute_script("arguments[0].click();", desc_element)
                    time.sleep(1)
                    desc_element.clear()
                    time.sleep(1)
                    
                    escribir_como_humano(desc_element, descripcion, driver)
                    
                    time.sleep(2)
                    
                    # Verificar que se escribi√≥
                    if "contenteditable" in selector:
                        texto_actual = desc_element.text
                    else:
                        texto_actual = desc_element.get_attribute('value')
                    
                    if texto_actual and len(texto_actual.strip()) > 10:
                        print("‚úÖ Descripci√≥n agregada correctamente")
                        print(f"   üìù Caracteres escritos: {len(texto_actual)}")
                        descripcion_agregada = True
                        break
                    else:
                        print(f"   ‚ö†Ô∏è Descripci√≥n no se escribi√≥ completamente")
                        
            except NoSuchElementException:
                continue
            except Exception as e:
                print(f"   ‚ùå Error con selector {selector}: {str(e)[:50]}")
                continue
        
        if not descripcion_agregada:
            print("‚ö†Ô∏è No se pudo agregar descripci√≥n con ning√∫n selector")
        
        # Screenshot pre-publicaci√≥n
        timestamp = int(time.time())
        driver.save_screenshot(f"selenium_pre_publish_{timestamp}.png")
        print(f"üì∏ Screenshot pre-publicaci√≥n: selenium_pre_publish_{timestamp}.png")
        
        # AJUSTE #5: Esperar 30 segundos antes de Post
        print("\n‚è≥ ESPERANDO 30 SEGUNDOS ANTES DE PUBLICAR...")
        for i in range(30, 0, -5):
            print(f"   ‚è∞ {i} segundos restantes...")
            movimiento_humano_realista(driver)
            time.sleep(5)
        
        # Buscar y clickear bot√≥n Post
        print("\nüöÄ BUSCANDO BOT√ìN POST...")
        
        # Estrategias de b√∫squeda del bot√≥n Post
        publish_selectors = [
            "//button[contains(text(), 'Post')]",
            "//button[contains(text(), 'Publicar')]",
            "//button[@data-e2e='publish-button']",
            "//button[@type='submit']",
            "//button[contains(text(), 'Subir')]",
            "//button[contains(@class, 'publish')]",
            "//button[contains(@class, 'submit')]",
            "//button[contains(@class, 'Post')]",
            "//button[contains(@data-testid, 'post')]",
            "//button[contains(@data-testid, 'publish')]",
            "//*[contains(@data-e2e, 'post')]",
            "//form//button[last()]",
            "//button[contains(@aria-label, 'Post')]",
            "//button[contains(@aria-label, 'Publish')]"
        ]
        
        publish_success = False
        for selector in publish_selectors:
            try:
                print(f"   üîç Probando selector: {selector}")
                publish_button = driver.find_element(By.XPATH, selector)
                
                is_visible = publish_button.is_displayed()
                is_enabled = publish_button.is_enabled()
                text_content = publish_button.text
                
                print(f"   üìç Bot√≥n encontrado:")
                print(f"      üìù Texto: '{text_content}'")
                print(f"      üëÅÔ∏è Visible: {is_visible}")
                print(f"      ‚úÖ Habilitado: {is_enabled}")
                
                if is_visible and is_enabled:
                    print("   ü§ñ Simulando comportamiento humano antes del click...")
                    
                    driver.execute_script("arguments[0].scrollIntoView();", publish_button)
                    time.sleep(random.uniform(2, 4))
                    
                    # Hover
                    actions = ActionChains(driver)
                    actions.move_to_element(publish_button).perform()
                    time.sleep(random.uniform(1, 3))
                    
                    # Click
                    print("   üñ±Ô∏è Realizando click...")
                    driver.execute_script("arguments[0].click();", publish_button)
                    print("‚úÖ Bot√≥n Post clickeado")
                    
                    time.sleep(5)
                    publish_success = True
                    break
                    
            except NoSuchElementException:
                continue
            except Exception as e:
                print(f"   ‚ùå Error con selector {selector}: {str(e)[:50]}")
                continue
        
        if publish_success:
            print("‚úÖ Video publicado exitosamente")
            time.sleep(10)
            return True
        else:
            print("‚ùå No se pudo encontrar el bot√≥n Post")
            
            # Screenshot final para diagn√≥stico
            driver.save_screenshot(f"selenium_post_button_not_found_{int(time.time())}.png")
            return False
        
    except Exception as e:
        print(f"‚ùå Error en proceso principal: {e}")
        return False
    
    finally:
        try:
            time.sleep(3)
            driver.quit()
        except:
            pass

def main():
    """Funci√≥n principal"""
    video_path = "data/videos/final/videos_unidos_FUNDIDO_TIKTOK.mp4"
    descripcion = """üî• ¬°Contenido √âPICO que te va a SORPRENDER! ‚ú® 

No puedes perderte esta incre√≠ble experiencia viral que est√° rompiendo TikTok üöÄ
¬°Dale LIKE si te gust√≥ y COMPARTE con tus amigos! üíñ

Prep√°rate para algo que jam√°s has visto antes... ¬øEst√°s listo? üëÄ

#fyp #viral #trending #amazing #foryou"""
    
    resultado = subir_video_ultra_stealth_selenium(video_path, descripcion)
    
    if resultado:
        print("\nüéâ ¬°UPLOAD COMPLETADO EXITOSAMENTE!")
    else:
        print("\n‚ùå Upload fall√≥")

if __name__ == "__main__":
    main()
