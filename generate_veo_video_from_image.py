# -*- coding: utf-8 -*-
"""
Genera videos con Gemini/Veo 3 a partir de im√°genes y guarda los MP4 localmente.
Requisitos:
  pip install google-genai python-dotenv
ENV:
  GEMINI_API_KEY=tu_api_key   (o VEO3_API_KEY como fallback)
  VEO3_MODEL=models/veo-3.0-generate-preview  (opcional)
"""

import os
import re
import json
import time
import mimetypes
import random
from typing import List, Dict, Optional

from dotenv import load_dotenv
from google import genai
from google.genai import types

# Importar nuestros m√≥dulos de prompts virales y an√°lisis de im√°genes
from viral_video_prompt_generator import ViralVideoPromptGenerator, enhance_existing_prompts
from image_metadata_analyzer import ImageMetadataAnalyzer
from viral_image_selector import ViralImageSelector

# ------------------------
# Utilidades
# ------------------------

def ensure_dir(path: str):
    os.makedirs(path, exist_ok=True)

def backoff_sleep(attempt: int):
    """Exponential backoff con jitter, m√°x 60s."""
    delay = min(60, (2 ** attempt) + random.uniform(0, 1))
    time.sleep(delay)

# ------------------------
# Selecci√≥n de prompts
# ------------------------

# ------------------------
# Selecci√≥n de prompts PROFESIONALES
# ------------------------

def seleccionar_mejores_imagenes_y_prompts() -> List[Dict[str, str]]:
    """
    Sistema PROFESIONAL: Usa selector inteligente + prompts virales optimizados con an√°lisis de metadatos,
    caso contrario usa el sistema legacy con mejoras.
    """
    
    print("üîç Iniciando an√°lisis avanzado de im√°genes...")
    
    # 1. SELECTOR INTELIGENTE DE IM√ÅGENES
    print("üéØ Seleccionando mejores im√°genes con criterios virales profesionales...")
    try:
        viral_selector = ViralImageSelector()
        best_images = viral_selector.select_best_images(num_select=3)
        print(f"   ‚úÖ {len(best_images)} im√°genes seleccionadas por potencial viral")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Error en selector viral: {e}")
        print("   üîÑ Usando selecci√≥n secuencial...")
        best_images = []
    
    # 2. AN√ÅLISIS DE METADATOS
    try:
        metadata_analyzer = ImageMetadataAnalyzer()
        print("   ‚úÖ Analizador de metadatos inicializado")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Error inicializando analizador: {e}")
        print("   üîÑ Continuando con sistema legacy...")
        metadata_analyzer = None
    
    # 2. PRIMERA OPCI√ìN: Usar prompts profesionales si existen
    enhanced_file = "data/analytics/fusion_prompts_auto_enhanced.json"
    if os.path.exists(enhanced_file):
        print("üé¨ Usando prompts PROFESIONALES optimizados...")
        with open(enhanced_file, "r", encoding="utf-8") as f:
            enhanced_data = json.load(f)
        
        enhanced_prompts = enhanced_data.get("enhanced_prompts", [])
        if enhanced_prompts:
            # Ordenar por score viral y tomar top 3
            sorted_prompts = sorted(
                enhanced_prompts, 
                key=lambda x: x["metadata"]["predicted_engagement"], 
                reverse=True
            )[:3]
            
            mejores = []
            
            # Usar im√°genes seleccionadas inteligentemente
            if best_images:
                selected_image_paths = [img['path'] for img in best_images]
                print(f"   üéØ Usando im√°genes seleccionadas por IA: {[os.path.basename(p) for p in selected_image_paths]}")
            else:
                # Fallback a orden secuencial
                imagenes = [f"data/images/gemini_image_{i+1}.png" for i in range(6)]
                selected_image_paths = [img for img in imagenes if os.path.exists(img)][:3]
                print(f"   üîÑ Fallback: usando orden secuencial")
            
            for i, enhanced_prompt in enumerate(sorted_prompts):
                # Mapear prompt a imagen seleccionada inteligentemente
                if i < len(selected_image_paths):
                    imagen = selected_image_paths[i]
                else:
                    # Si no hay suficientes im√°genes seleccionadas, usar fallback
                    imagenes = [f"data/images/gemini_image_{i+1}.png" for i in range(6)]
                    imagen = next((im for im in imagenes if os.path.exists(im)), None)
                
                if imagen:
                    # Enriquecer con an√°lisis de metadatos si est√° disponible
                    image_context = None
                    if metadata_analyzer:
                        try:
                            image_context = metadata_analyzer.get_video_prompt_context(imagen)
                            if image_context.get('error'):
                                print(f"   ‚ö†Ô∏è  No se pudo analizar {imagen}: {image_context['error']}")
                                image_context = None
                            else:
                                print(f"   ‚úÖ Metadatos extra√≠dos para {imagen}")
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è  Error analizando {imagen}: {e}")
                            image_context = None
                    
                    item_data = {
                        "prompt": enhanced_prompt["prompt"],
                        "imagen": imagen,
                        "metadata": enhanced_prompt["metadata"],
                        "viral_score": enhanced_prompt["metadata"]["predicted_engagement"]
                    }
                    
                    # Agregar contexto de imagen si est√° disponible
                    if image_context:
                        item_data["image_context"] = image_context
                        # Actualizar metadatos con informaci√≥n de la imagen
                        if "image_analysis" in image_context:
                            analysis = image_context["image_analysis"]
                            item_data["metadata"]["detected_theme"] = analysis.get("main_theme", "")
                            item_data["metadata"]["image_colors"] = analysis.get("dominant_colors", [])
                            item_data["metadata"]["image_mood"] = analysis.get("mood", "")
                    
                    mejores.append(item_data)
            
            print(f"‚úÖ {len(mejores)} prompts profesionales seleccionados")
            for i, item in enumerate(mejores, 1):
                print(f"   {i}. Score viral: {item['viral_score']}/100")
                print(f"      Categor√≠a: {item['metadata']['viral_category']}")
                if item.get('image_context'):
                    theme = item['image_context'].get('image_analysis', {}).get('main_theme', 'N/A')
                    print(f"      Tema detectado: {theme}")
            
            return mejores
    
    # 2. FALLBACK: Sistema legacy mejorado
    print("‚ö†Ô∏è Prompts profesionales no disponibles, usando sistema legacy mejorado...")
    
    with open("data/analytics/fusion_prompts_auto.json", "r", encoding="utf-8") as f:
        prompts_data = json.load(f)
    prompts = prompts_data["prompts"]

    imagenes = [f"data/images/gemini_image_{i+1}.png" for i in range(6)]
    
    # Keywords virales actualizados 2025
    keywords_virales = [
        'asmr', 'kawaii', 'capibara', 'explosi√≥n', 'colores vibrantes', 'pastel', 'fruta',
        'atardecer', 'gaviotas', 'gelatina', 'acuario', 'pecera', 'playero', 'relajante',
        'adictivo', 'macro', 'neon', 'viral', 'miniatura', 'crujiente', 'sonido', 'burbuja',
        'crema', 'rosa', 'turquesa', 'summer', 'foodart', 'satisfying', 'tingles', 'dreamcore',
        'cottagecore', 'aesthetic', 'liminal', 'hypnotic', 'therapeutic', 'immersive'
    ]

    def score_prompt(p: str) -> int:
        s = 0
        low = p.lower()
        
        # Score b√°sico por keywords
        for kw in keywords_virales:
            if kw in low:
                s += 1
                
        # Bonificaciones especiales
        s += low.count('asmr') * 3  # ASMR es muy viral
        s += low.count('adictivo') * 2
        s += low.count('viral') * 2
        s += low.count('satisfying') * 2
        s += low.count('hipn√≥tico') * 2
        
        # Bonus por elementos t√©cnicos
        technical_terms = ['hiperrealista', 'cinematogr√°fico', 'profesional', 'ultra', '4k']
        for term in technical_terms:
            if term in low:
                s += 1
                
        return s

    scored = [(score_prompt(p), i, p) for i, p in enumerate(prompts)]
    top3 = sorted(scored, reverse=True)[:3]

    mejores = []
    
    # Usar im√°genes seleccionadas inteligentemente si est√°n disponibles
    if best_images:
        selected_image_paths = [img['path'] for img in best_images]
        print(f"   üéØ Sistema legacy usando im√°genes seleccionadas por IA: {[os.path.basename(p) for p in selected_image_paths]}")
    else:
        imagenes = [f"data/images/gemini_image_{i+1}.png" for i in range(6)]
        selected_image_paths = [img for img in imagenes if os.path.exists(img)]
        print(f"   üîÑ Sistema legacy usando orden secuencial")
    
    for i, (score, idx, prompt_original) in enumerate(top3):
        # Mapear a imagen seleccionada inteligentemente
        if best_images and i < len(selected_image_paths):
            imagen = selected_image_paths[i]
        else:
            # Fallback al mapeo original
            imagenes = [f"data/images/gemini_image_{i+1}.png" for i in range(6)]
            imagen = imagenes[idx] if idx < len(imagenes) and os.path.exists(imagenes[idx]) else None
            if not imagen:
                imagen = next((im for im in imagenes if os.path.exists(im)), None)
        
        if not imagen:
            continue
        
        # AN√ÅLISIS DE METADATOS PARA MEJORAR EL PROMPT
        image_context = None
        if metadata_analyzer:
            try:
                image_context = metadata_analyzer.get_video_prompt_context(imagen)
                if image_context.get('error'):
                    print(f"   ‚ö†Ô∏è  No se pudo analizar {imagen}: {image_context['error']}")
                    image_context = None
                else:
                    print(f"   ‚úÖ Metadatos extra√≠dos para {imagen}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Error analizando {imagen}: {e}")
                image_context = None
        
        # MEJORAS PROFESIONALES al prompt legacy
        prompt_video = prompt_original
        
        # Transformaciones b√°sicas imagen ‚Üí video
        prompt_video = re.sub(r'Genera una imagen digital hiperrealista de', 'Crea un video ASMR cinematogr√°fico ultra viral de', prompt_video, flags=re.IGNORECASE)
        prompt_video = re.sub(r'Genera una imagen digital hiperrealista', 'Crea un video ASMR cinematogr√°fico viral', prompt_video, flags=re.IGNORECASE)
        prompt_video = re.sub(r'Genera una imagen', 'Crea un video hipn√≥tico', prompt_video, flags=re.IGNORECASE)
        prompt_video = re.sub(r'\bimagen(es)?\b', 'video', prompt_video, flags=re.IGNORECASE)
        prompt_video = re.sub(r'\bImagen(es)?\b', 'Video', prompt_video, flags=re.IGNORECASE)
        
        # Eliminar referencias de formato
        prompt_video = re.sub(r'Formato PNG\.?', '', prompt_video, flags=re.IGNORECASE)
        prompt_video = re.sub(r'Responde solo con imagen PNG\.?', '', prompt_video, flags=re.IGNORECASE)
        prompt_video = re.sub(r'\bPNG\b', '', prompt_video, flags=re.IGNORECASE)
        
        # Mejoras de estilo
        prompt_video = re.sub(r'estilo hiperrealista', 'estilo cinematogr√°fico profesional viral', prompt_video, flags=re.IGNORECASE)
        prompt_video = re.sub(r'estilo visual hiperrealista', 'estilo visual cinematogr√°fico viral', prompt_video, flags=re.IGNORECASE)
        prompt_video = re.sub(r'estilo diorama hiperrealista', 'estilo diorama cinematogr√°fico immersivo', prompt_video, flags=re.IGNORECASE)
        
        # ADICIONES PROFESIONALES ESPEC√çFICAS (enriquecidas con metadatos)
        professional_additions = [
            "\n\nESPECIFICACIONES T√âCNICAS PROFESIONALES:",
            "- Cinematograf√≠a fluida con movimientos hipn√≥ticos en slow motion",
            "- Audio ASMR binaural 3D perfectamente calibrado para auriculares", 
            "- Iluminaci√≥n cinematogr√°fica premium con contraste perfecto",
            "- Composici√≥n visual estudiada optimizada para formato vertical 9:16",
            "- Timing preciso dise√±ado para m√°ximo retention rate en TikTok"
        ]
        
        # Enriquecer con informaci√≥n de metadatos si est√° disponible
        if image_context and "image_analysis" in image_context:
            analysis = image_context["image_analysis"]
            
            # Agregar informaci√≥n espec√≠fica basada en el an√°lisis
            if analysis.get("dominant_colors"):
                colors_str = ", ".join(analysis["dominant_colors"][:3])
                professional_additions.append(f"- Paleta de colores optimizada: {colors_str} para m√°ximo impacto visual")
            
            if analysis.get("mood"):
                professional_additions.append(f"- Ambiente emocional: {analysis['mood']} dise√±ado para engagement")
            
            if analysis.get("movement_potential"):
                movements = ", ".join(analysis["movement_potential"][:2])
                professional_additions.append(f"- Elementos de movimiento viral: {movements}")
            
            if analysis.get("viral_hooks"):
                hooks = ", ".join(analysis["viral_hooks"][:2])
                professional_additions.append(f"- Hooks virales detectados: {hooks}")
        
        professional_additions.extend([
            "\nOBJETIVO VIRAL:",
            "Video ultra adictivo dise√±ado para generar rewatching compulsivo,",
            "shares org√°nicos y engagement masivo. Optimizado para algoritmo",
            "TikTok con elementos que activan dopamine hits instant√°neos."
        ])
        
        prompt_video += "\n".join(professional_additions)

        item_data = {
            "prompt": prompt_video.strip(), 
            "imagen": imagen,
            "viral_score": score,
            "legacy_enhanced": True
        }
        
        # Agregar contexto de imagen si est√° disponible
        if image_context:
            item_data["image_context"] = image_context
            item_data["detected_theme"] = image_context.get("image_analysis", {}).get("main_theme", "")
            
        mejores.append(item_data)

    print(f"‚úÖ {len(mejores)} prompts legacy mejorados seleccionados")
    for i, item in enumerate(mejores, 1):
        print(f"   {i}. Score viral: {item['viral_score']}")
        if item.get('detected_theme'):
            print(f"      Tema detectado: {item['detected_theme']}")
    
    return mejores# ------------------------
# Cliente Veo
# ------------------------

class VeoClient:
    def __init__(self):
        load_dotenv()
        api_key = os.getenv("GEMINI_API_KEY") or os.getenv("VEO3_API_KEY")
        assert api_key, "Falta GEMINI_API_KEY (o VEO3_API_KEY) en el entorno"
        self.model_name = os.getenv("VEO3_MODEL", "models/veo-3.0-generate-preview")
        self.client = genai.Client(api_key=api_key)

    def _open_image(self, image_path: str) -> types.Image:
        mime, _ = mimetypes.guess_type(image_path)
        if not mime:
            mime = "image/png"
        with open(image_path, "rb") as f:
            img_bytes = f.read()
        return types.Image(image_bytes=img_bytes, mime_type=mime)

    def generate_video_from_image(
        self,
        image_path: str,
        prompt: str,
        out_dir: str = "data/videos/original",
        max_attempts_poll: int = 60,
        retry_on_429: int = 3
    ) -> Optional[str]:
        """Genera un video y lo guarda como mp4. Devuelve la ruta o None."""
        ensure_dir(out_dir)

        # --- Env√≠o con reintentos por 429/quotas ---
        send_attempt = 0
        operation = None
        while send_attempt <= retry_on_429:
            try:
                image_obj = self._open_image(image_path)
                print(f"Modelo: {self.model_name}")
                print("Enviando solicitud de generaci√≥n...")
                operation = self.client.models.generate_videos(
                    model=self.model_name,
                    prompt=prompt,
                    image=image_obj,
                    config=types.GenerateVideosConfig()
                )
                break
            except Exception as e:
                msg = str(e).lower()
                if "429" in msg or "resource_exhausted" in msg or "quota" in msg or "rate" in msg:
                    print(f"Warning: L√≠mite alcanzado (intento {send_attempt+1}/{retry_on_429+1}). Backoff...")
                    backoff_sleep(send_attempt)
                    send_attempt += 1
                    continue
                print(f"Error al iniciar generaci√≥n: {e}")
                return None

        if operation is None:
            print("No se pudo iniciar la operaci√≥n (posible l√≠mite de API).")
            return None

        # --- Poll hasta done ---
        attempt = 0
        while attempt < max_attempts_poll:
            if getattr(operation, "done", False):
                break
            time.sleep(10)
            try:
                operation = self.client.operations.get(operation)
            except Exception as e:
                print(f"Warning: Error al consultar estado: {e}")
                backoff_sleep(min(attempt, 5))
            attempt += 1

        if not getattr(operation, "done", False):
            print("Timeout esperando la generaci√≥n.")
            return None

        # --- Descargar usando files.download(...) y save(...) ---
        try:
            videos = getattr(getattr(operation, "response", None), "generated_videos", None)
            if not videos:
                err = getattr(operation, "error", None)
                print(f"Error: Respuesta sin videos. Error: {err}")
                return None

            gv = videos[0]  # primer resultado
            # 1) descargar al file store del SDK
            self.client.files.download(file=gv.video)

            # 2) guardar en disco
            ts = time.strftime("%Y%m%d_%H%M%S")
            outfile = os.path.join(out_dir, f"veo_video_{ts}.mp4")
            gv.video.save(outfile)

            if os.path.exists(outfile) and os.path.getsize(outfile) > 1024:
                print(f"Guardado: {outfile}")
                return outfile

            print("Warning: Descarga realizada pero archivo es muy peque√±o.")
            return None

        except Exception as e:
            print(f"Error descargando el video: {e}")
            return None

# ------------------------
# Main
# ------------------------

def main():
    print("GENERADOR DE VIDEOS VIRALES PROFESIONALES")
    print("=" * 60)
    
    # 1) Seleccionar mejores prompts (profesionales o legacy mejorados)
    mejores = seleccionar_mejores_imagenes_y_prompts()
    if not mejores:
        print("No hay im√°genes disponibles (data/images/gemini_image_*.png).")
        return

    print(f"üéØ {len(mejores)} prompts optimizados seleccionados:")
    for i, item in enumerate(mejores, 1):
        print(f"üìπ OPCI√ìN {i}:")
        print(f"   üñºÔ∏è  Imagen: {item['imagen']}")
        print(f"   üî• Score viral: {item.get('viral_score', 'N/A')}")
        
        if 'metadata' in item and item['metadata']:
            try:
                metadata = item['metadata']
                if isinstance(metadata, dict):
                    print(f"   üé≠ Categor√≠a: {metadata.get('viral_category', 'N/A')}")
                    print(f"   üé® Estilo: {metadata.get('style_preference', 'N/A')}")
                    target_demo = metadata.get('target_demographics', [])
                    if isinstance(target_demo, list) and target_demo:
                        print(f"   üë• Target: {', '.join(target_demo)}")
                else:
                    print(f"   ÔøΩ Metadata: {metadata}")
            except Exception:
                print(f"   üìã Prompt profesional detectado")
        elif item.get('legacy_enhanced'):
            print(f"   üîß Tipo: Legacy mejorado profesionalmente")
        
        # Mostrar preview del prompt
        prompt_preview = item['prompt'][:200].replace('\n', ' ')
        print(f"   üìù Preview: {prompt_preview}...")
        print(f"   üìè Longitud total: {len(item['prompt'])} caracteres")

    # Generaci√≥n autom√°tica sin confirmaci√≥n
    print(f"üöÄ Iniciando generaci√≥n autom√°tica de {len(mejores)} videos profesionales")
    print("   üí° Esto puede tomar varios minutos por video...")
    print("   ‚ö° MODO AUTOM√ÅTICO - Sin intervenci√≥n humana")

    # Inicializar cliente Veo
    print("ü§ñ Inicializando cliente Veo...")
    vc = VeoClient()
    video_prompt_map = []

    # 2) Generar videos
    for i, item in enumerate(mejores[:3], 1):
        print(f"{'='*60}")
        print(f"üé¨ GENERANDO VIDEO {i}/{len(mejores[:3])}")
        print(f"üñºÔ∏è Imagen: {item['imagen']}")
        print(f"üî• Score viral: {item.get('viral_score', 'N/A')}")
        print(f"{'='*60}")
        
        # Mostrar prompt completo para este video
        print(f"üìù PROMPT PROFESIONAL:")
        print("-" * 40)
        print(item['prompt'])
        print("-" * 40)
        
        print(f"‚è≥ Enviando a Veo 3... (esto puede tomar 5-10 minutos)")
        
        out = vc.generate_video_from_image(item["imagen"], item["prompt"])
        if out:
            video_data = {
                "video": out, 
                "prompt": item["prompt"], 
                "imagen": item["imagen"],
                "viral_score": item.get('viral_score'),
                "generation_timestamp": time.strftime('%Y-%m-%d %H:%M:%S')
            }
            if item.get('metadata'):
                video_data["metadata"] = item["metadata"]
            video_prompt_map.append(video_data)
            print(f"‚úÖ Video {i} generado exitosamente: {out}")
            print(f"üìä Score viral: {item.get('viral_score', 'N/A')}")
        else:
            print(f"‚ùå Video {i} fall√≥ con Veo3 - intentando fallback Pollinations IA...")
            try:
                from pollinations_fallback import pollinations_generate_video
                poll_out = pollinations_generate_video(item["imagen"], item["prompt"])
                if poll_out:
                    video_data = {
                        "video": poll_out,
                        "prompt": item["prompt"],
                        "imagen": item["imagen"],
                        "viral_score": item.get('viral_score'),
                        "generation_timestamp": time.strftime('%Y-%m-%d %H:%M:%S'),
                        "fallback": "pollinations"
                    }
                    if item.get('metadata'):
                        video_data["metadata"] = item["metadata"]
                    video_prompt_map.append(video_data)
                    print(f"‚úÖ Video {i} generado con Pollinations: {poll_out}")
                else:
                    print(f"‚ùå Pollinations IA tambi√©n fall√≥ para el video {i}")
            except Exception as e:
                print(f"‚ùå Error en fallback Pollinations IA: {e}")

    # 3) Guardar mapeo con informaci√≥n profesional
    ensure_dir("data")
    timestamp = int(time.time())
    mapeo_file = f"video_prompt_map_professional_{timestamp}.json"
    
    final_data = {
        "videos": video_prompt_map,
        "generation_info": {
            "total_videos": len(video_prompt_map),
            "successful_generations": len([v for v in video_prompt_map if v.get("video")]),
            "average_viral_score": sum(v.get("viral_score", 0) for v in video_prompt_map) / len(video_prompt_map) if video_prompt_map else 0,
            "generation_date": time.strftime('%Y-%m-%d %H:%M:%S'),
            "system_version": "Professional Viral Prompts v2.0"
        }
    }
    
    with open(mapeo_file, "w", encoding="utf-8") as f:
        json.dump(final_data, f, ensure_ascii=False, indent=2)

    # 4) Resumen final
    print(f"{'='*60}")
    print(f"üéâ GENERACI√ìN COMPLETADA")
    print(f"{'='*60}")
    print(f"‚úÖ Videos generados: {len(video_prompt_map)}")
    print(f"üìä Score viral promedio: {final_data['generation_info']['average_viral_score']:.1f}")
    print(f"üíæ Mapeo guardado: {mapeo_file}")
    
    if video_prompt_map:
        print(f"üé¨ VIDEOS GENERADOS:")
        for i, video in enumerate(video_prompt_map, 1):
            print(f"   {i}. {video['video']}")
            print(f"      Score: {video.get('viral_score', 'N/A')}")
            if video.get('metadata'):
                print(f"      Categor√≠a: {video['metadata']['viral_category']}")
        
        print(f"üöÄ PR√ìXIMOS PASOS:")
        print(f"   1. Revisar videos en data/videos/")
        print(f"   2. Procesar para TikTok con crop_con_zoom.py")
        print(f"   3. Subir con el uploader automatizado")
        print(f"   4. Monitorear m√©tricas de engagement")
    else:
        print(f"‚ö†Ô∏è No se generaron videos. Revisar:")
        print(f"   - L√≠mites de API Veo 3")
        print(f"   - Conexi√≥n a internet")
        print(f"   - Configuraci√≥n de GEMINI_API_KEY")

if __name__ == "__main__":
    main()
